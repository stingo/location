<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">


<!--trix-->
<style>
    @charset "UTF-8";
trix-editor {
  @apply form-control;
  border-radius: 3px;
  margin: 0;
  padding: 0.4em 0.6em;
  min-height: 5em;
  outline: none;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
trix-toolbar {
  @apply form-control;
  border-bottom: none;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  padding: 0;
}
trix-toolbar * {
  box-sizing: border-box;
}
trix-toolbar .trix-button-row {
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-between;
  overflow-x: auto;
}
trix-toolbar .trix-button-group {
  display: flex;
}
@media (max-device-width: 768px) {
  trix-toolbar .trix-button-group:not(:first-child) {
    margin-left: 0;
  }
}
trix-toolbar .trix-button-group-spacer {
  flex-grow: 1;
}
@media (max-device-width: 768px) {
  trix-toolbar .trix-button-group-spacer {
    display: none;
  }
}
trix-toolbar .trix-button {
  position: relative;
  float: left;
  color: rgba(0, 0, 0, 0.6);
  font-size: 0.75em;
  font-weight: 600;
  white-space: nowrap;
  padding: 0 0.5em;
  margin: 0;
  outline: none;
  border: none;
  border-radius: 0;
  background: transparent;
}
trix-toolbar .trix-button.trix-active {
  background: #cbeefa;
  color: black;
}
trix-toolbar .trix-button:not(:disabled) {
  cursor: pointer;
}
trix-toolbar .trix-button:disabled {
  color: rgba(0, 0, 0, 0.125);
}
@media (max-device-width: 768px) {
  trix-toolbar .trix-button {
    letter-spacing: -0.01em;
    padding: 0 0.3em;
  }
}
trix-toolbar .trix-button--icon {
  font-size: inherit;
  width: 2.2em;
  height: 2.0em;
  max-width: calc(0.8em + 4vw);
  text-indent: -9999px;
}
@media (max-device-width: 768px) {
  trix-toolbar .trix-button--icon {
    height: 2em;
    max-width: calc(0.8em + 3.5vw);
  }
}
trix-toolbar .trix-button--icon::before {
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0.6;
  content: "";
  background-position: center;
  background-repeat: no-repeat;
}
@media (max-device-width: 768px) {
  trix-toolbar .trix-button--icon::before {
    right: 6%;
    left: 6%;
  }
}
trix-toolbar .trix-button--icon.trix-active::before {
  opacity: 1;
}
trix-toolbar .trix-button--icon:disabled::before {
  opacity: 0.125;
}
trix-toolbar .trix-button--icon-attach::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M16.5%206v11.5a4%204%200%201%201-8%200V5a2.5%202.5%200%200%201%205%200v10.5a1%201%200%201%201-2%200V6H10v9.5a2.5%202.5%200%200%200%205%200V5a4%204%200%201%200-8%200v12.5a5.5%205.5%200%200%200%2011%200V6h-1.5z%22%2F%3E%3C%2Fsvg%3E);
  top: 8%;
  bottom: 4%;
}
trix-toolbar .trix-button--icon-bold::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M15.6%2011.8c1-.7%201.6-1.8%201.6-2.8a4%204%200%200%200-4-4H7v14h7c2.1%200%203.7-1.7%203.7-3.8%200-1.5-.8-2.8-2.1-3.4zM10%207.5h3a1.5%201.5%200%201%201%200%203h-3v-3zm3.5%209H10v-3h3.5a1.5%201.5%200%201%201%200%203z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-italic::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M10%205v3h2.2l-3.4%208H6v3h8v-3h-2.2l3.4-8H18V5h-8z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-link::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M9.88%2013.7a4.3%204.3%200%200%201%200-6.07l3.37-3.37a4.26%204.26%200%200%201%206.07%200%204.3%204.3%200%200%201%200%206.06l-1.96%201.72a.91.91%200%201%201-1.3-1.3l1.97-1.71a2.46%202.46%200%200%200-3.48-3.48l-3.38%203.37a2.46%202.46%200%200%200%200%203.48.91.91%200%201%201-1.3%201.3z%22%2F%3E%3Cpath%20d%3D%22M4.25%2019.46a4.3%204.3%200%200%201%200-6.07l1.93-1.9a.91.91%200%201%201%201.3%201.3l-1.93%201.9a2.46%202.46%200%200%200%203.48%203.48l3.37-3.38c.96-.96.96-2.52%200-3.48a.91.91%200%201%201%201.3-1.3%204.3%204.3%200%200%201%200%206.07l-3.38%203.38a4.26%204.26%200%200%201-6.07%200z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-strike::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M12.73%2014l.28.14c.26.15.45.3.57.44.12.14.18.3.18.5%200%20.3-.15.56-.44.75-.3.2-.76.3-1.39.3A13.52%2013.52%200%200%201%207%2014.95v3.37a10.64%2010.64%200%200%200%204.84.88c1.26%200%202.35-.19%203.28-.56.93-.37%201.64-.9%202.14-1.57s.74-1.45.74-2.32c0-.26-.02-.51-.06-.75h-5.21zm-5.5-4c-.08-.34-.12-.7-.12-1.1%200-1.29.52-2.3%201.58-3.02%201.05-.72%202.5-1.08%204.34-1.08%201.62%200%203.28.34%204.97%201l-1.3%202.93c-1.47-.6-2.73-.9-3.8-.9-.55%200-.96.08-1.2.26-.26.17-.38.38-.38.64%200%20.27.16.52.48.74.17.12.53.3%201.05.53H7.23zM3%2013h18v-2H3v2z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-quote::before {
  background-image: url(data:image/svg+xml,%3Csvg%20version%3D%221%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M6%2017h3l2-4V7H5v6h3zm8%200h3l2-4V7h-6v6h3z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-heading-1::before {
  background-image: url(data:image/svg+xml,%3Csvg%20version%3D%221%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M12%209v3H9v7H6v-7H3V9h9zM8%204h14v3h-6v12h-3V7H8V4z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-code::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M18.2%2012L15%2015.2l1.4%201.4L21%2012l-4.6-4.6L15%208.8l3.2%203.2zM5.8%2012L9%208.8%207.6%207.4%203%2012l4.6%204.6L9%2015.2%205.8%2012z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-bullet-list::before {
  background-image: url(data:image/svg+xml,%3Csvg%20version%3D%221%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M4%204a2%202%200%201%200%200%204%202%202%200%200%200%200-4zm0%206a2%202%200%201%200%200%204%202%202%200%200%200%200-4zm0%206a2%202%200%201%200%200%204%202%202%200%200%200%200-4zm4%203h14v-2H8v2zm0-6h14v-2H8v2zm0-8v2h14V5H8z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-number-list::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M2%2017h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1%203h1.8L2%2013.1v.9h3v-1H3.2L5%2010.9V10H2v1zm5-6v2h14V5H7zm0%2014h14v-2H7v2zm0-6h14v-2H7v2z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-undo::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M12.5%208c-2.6%200-5%201-6.9%202.6L2%207v9h9l-3.6-3.6A8%208%200%200%201%2020%2016l2.4-.8a10.5%2010.5%200%200%200-10-7.2z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-redo::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M18.4%2010.6a10.5%2010.5%200%200%200-16.9%204.6L4%2016a8%208%200%200%201%2012.7-3.6L13%2016h9V7l-3.6%203.6z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-decrease-nesting-level::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M3%2019h19v-2H3v2zm7-6h12v-2H10v2zm-8.3-.3l2.8%202.9L6%2014.2%204%2012l2-2-1.4-1.5L1%2012l.7.7zM3%205v2h19V5H3z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-button--icon-increase-nesting-level::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M3%2019h19v-2H3v2zm7-6h12v-2H10v2zm-6.9-1L1%2014.2l1.4%201.4L6%2012l-.7-.7-2.8-2.8L1%209.9%203.1%2012zM3%205v2h19V5H3z%22%2F%3E%3C%2Fsvg%3E);
}
trix-toolbar .trix-dialogs {
  position: relative;
}
trix-toolbar .trix-dialog {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  font-size: 0.75em;
  padding: 15px 10px;
  background: #fff;
  box-shadow: 0 0.3em 1em #ccc;
  border-top: 2px solid #888;
  border-radius: 5px;
  z-index: 5;
}
trix-toolbar .trix-input--dialog {
  font-size: inherit;
  font-weight: normal;
  padding: 0.5em 0.8em;
  margin: 0 10px 0 0;
  border-radius: 3px;
  border: 1px solid #bbb;
  background-color: #fff;
  box-shadow: none;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}
trix-toolbar .trix-input--dialog.validate:invalid {
  box-shadow: #F00 0px 0px 1.5px 1px;
}
trix-toolbar .trix-button--dialog {
  @apply btn btn-small btn-primary;
  font-size: inherit;
}
trix-toolbar .trix-dialog--link {
  max-width: 600px;
}
trix-toolbar .trix-dialog__link-fields {
  display: flex;
  align-items: baseline;
}
trix-toolbar .trix-dialog__link-fields .trix-input {
  flex: 1;
  width: 100%;
}
trix-toolbar .trix-dialog__link-fields .trix-button-group {
  flex: 0 0 content;
  margin: 0;

  .trix-button--dialog:last-of-type {
    @apply ml-1;
  }
}
@media (max-device-width: 768px) {
  trix-toolbar .trix-dialog__link-fields {
    display: block;

    .trix-button-group {
      @apply mt-2;
    }
  }
}

trix-editor [data-trix-mutable]:not(.attachment__caption-editor) {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

trix-editor [data-trix-mutable]::-moz-selection,
trix-editor [data-trix-cursor-target]::-moz-selection, trix-editor [data-trix-mutable] ::-moz-selection {
  background: none;
}
trix-editor [data-trix-mutable]::selection,
trix-editor [data-trix-cursor-target]::selection, trix-editor [data-trix-mutable] ::selection {
  background: none;
}

trix-editor [data-trix-mutable].attachment__caption-editor:focus::-moz-selection {
  background: highlight;
}
trix-editor [data-trix-mutable].attachment__caption-editor:focus::selection {
  background: highlight;
}

trix-editor [data-trix-mutable].attachment.attachment--file {
  box-shadow: 0 0 0 2px highlight;
  border-color: transparent;
}
trix-editor [data-trix-mutable].attachment img {
  box-shadow: 0 0 0 2px highlight;
}
trix-editor .attachment {
  position: relative;
}
trix-editor .attachment:hover {
  cursor: default;
}
trix-editor .attachment--preview .attachment__caption:hover {
  cursor: text;
}
trix-editor .attachment__progress {
  position: absolute;
  z-index: 1;
  height: 20px;
  top: calc(50% - 10px);
  left: 5%;
  width: 90%;
  opacity: 0.9;
  transition: opacity 200ms ease-in;
}
trix-editor .attachment__progress[value="100"] {
  opacity: 0;
}
trix-editor .attachment__caption-editor {
  display: inline-block;
  width: 100%;
  margin: 0;
  padding: 0;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
  color: inherit;
  text-align: center;
  vertical-align: top;
  border: none;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}
trix-editor .attachment__toolbar {
  position: absolute;
  z-index: 1;
  top: -0.9em;
  left: 0;
  width: 100%;
  text-align: center;
}
trix-editor .trix-button-group {
  display: inline-flex;
}
trix-editor .trix-button {
  position: relative;
  float: left;
  color: #666;
  white-space: nowrap;
  font-size: 80%;
  padding: 0 0.8em;
  margin: 0;
  outline: none;
  border: none;
  border-radius: 0;
  background: transparent;
}
trix-editor .trix-button:not(:first-child) {
  border-left: 1px solid #ccc;
}
trix-editor .trix-button.trix-active {
  background: #cbeefa;
}
trix-editor .trix-button:not(:disabled) {
  cursor: pointer;
}
trix-editor .trix-button--remove {
  text-indent: -9999px;
  display: inline-block;
  padding: 0;
  outline: none;
  width: 1.8em;
  height: 1.8em;
  line-height: 1.8em;
  border-radius: 50%;
  background-color: #fff;
  border: 2px solid highlight;
  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.25);
}
trix-editor .trix-button--remove::before {
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0.7;
  content: "";
  background-image: url(data:image/svg+xml,%3Csvg%20height%3D%2224%22%20width%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M19%206.4L17.6%205%2012%2010.6%206.4%205%205%206.4l5.6%205.6L5%2017.6%206.4%2019l5.6-5.6%205.6%205.6%201.4-1.4-5.6-5.6z%22%2F%3E%3Cpath%20d%3D%22M0%200h24v24H0z%22%20fill%3D%22none%22%2F%3E%3C%2Fsvg%3E);
  background-position: center;
  background-repeat: no-repeat;
  background-size: 90%;
}
trix-editor .trix-button--remove:hover {
  border-color: #333;
}
trix-editor .trix-button--remove:hover::before {
  opacity: 1;
}
trix-editor .attachment__metadata-container {
  position: relative;
}
trix-editor .attachment__metadata {
  position: absolute;
  left: 50%;
  top: 2em;
  transform: translate(-50%, 0);
  max-width: 90%;
  padding: 0.1em 0.6em;
  font-size: 0.8em;
  color: #fff;
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: 3px;
}
trix-editor .attachment__metadata .attachment__name {
  display: inline-block;
  max-width: 100%;
  vertical-align: bottom;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
trix-editor .attachment__metadata .attachment__size {
  margin-left: 0.2em;
  white-space: nowrap;
}

.trix-content {
  line-height: 1.5;
}
.trix-content * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
.trix-content h1 {
  font-size: 1.2em;
  line-height: 1.2;
}
.trix-content blockquote {
  border: 0 solid #ccc;
  border-left-width: 0.3em;
  margin-left: 0.3em;
  padding-left: 0.6em;
}
.trix-content [dir=rtl] blockquote,
.trix-content blockquote[dir=rtl] {
  border-width: 0;
  border-right-width: 0.3em;
  margin-right: 0.3em;
  padding-right: 0.6em;
}
.trix-content li {
  margin-left: 1em;
}
.trix-content [dir=rtl] li {
  margin-right: 1em;
}
.trix-content pre {
  display: inline-block;
  width: 100%;
  vertical-align: top;
  font-family: monospace;
  font-size: 0.9em;
  padding: 0.5em;
  white-space: pre;
  background-color: #eee;
  overflow-x: auto;
}
.trix-content img {
  max-width: 100%;
  height: auto;
}
.trix-content .attachment {
  display: inline-block;
  position: relative;
  max-width: 100%;
}
.trix-content .attachment a {
  color: inherit;
  text-decoration: none;
}
.trix-content .attachment a:hover, .trix-content .attachment a:visited:hover {
  color: inherit;
}
.trix-content .attachment__caption {
  text-align: center;
}
.trix-content .attachment__caption .attachment__name + .attachment__size::before {
  content: ' · ';
}
.trix-content .attachment--preview {
  width: 100%;
  text-align: center;
}
.trix-content .attachment--preview .attachment__caption {
  color: #666;
  font-size: 0.9em;
  line-height: 1.2;
}
.trix-content .attachment--file {
  color: #333;
  line-height: 1;
  margin: 0 2px 2px 2px;
  padding: 0.4em 1em;
  border: 1px solid #bbb;
  border-radius: 5px;
}
.trix-content .attachment-gallery {
  display: flex;
  flex-wrap: wrap;
  position: relative;

}
.trix-content .attachment-gallery .attachment {
  flex: 1 0 33%;
  padding: 0 0.5em;
  max-width: 33%;

}
.trix-content .attachment-gallery.attachment-gallery--2 .attachment, .trix-content .attachment-gallery.attachment-gallery--4 .attachment {
  flex-basis: 50%;
  max-width: 50%;
}

</style>


<!--actiontext-->
<style>
    .link_to_embed {
  white-space: normal;

  @apply mt-4 md:ml-4;

  [data-behavior='embed_url'] {
    @apply block md:ml-3 md:inline-block;
  }
}

.trix-content {
  img {
    display: inline-block;
    max-width: 100%;
    height: auto;
  }

  .attachment-gallery {
    > action-text-attachment,
    > .attachment {
      flex: 1 0 33%;
      padding: 0 0.5em;
      max-width: 33%;
    }

    &.attachment-gallery--2,
    &.attachment-gallery--4 {
      > action-text-attachment,
      > .attachment {
        flex-basis: 50%;
        max-width: 50%;
      }
    }
  }

  .embed {
    display: inline-block;
    line-height: 1;
    margin: 1em 0 !important;
    padding: 0 !important;
    width: 100%;
  }

  iframe, twitter-widget {
    display: inline-block !important;
  }
}

/* Trix attachment formatting */
.attachment--preview {
  margin: 0.6em 0;
  text-align: center;
  width: 100%;
}

/* Tribute styles */
.tribute-container {
  border-radius: 4px;
  border: 1px solid rgba(0,0,0,0.1);
  box-shadow: 0 0 4px rgba(0,0,0,0.1), 0 5px 20px rgba(0,0,0,0.05);

  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  li {
    background: #fff;
    padding: 0.2em 1em;
    min-width: 15em;
    max-width: 100%;
  }

  .highlight {
    @apply bg-blue-500;
    color: #fff;

    span {
      font-weight: bold;
    }
  }
}

/* Tweet embeds */
blockquote.twitter-tweet {
    display: inline-block;
    font-family: "Helvetica Neue", Roboto, "Segoe UI", Calibri, sans-serif;
    font-size: 12px;
    font-weight: bold;
    line-height: 16px;
    border-color: #eee #ddd #bbb;
    border-radius: 5px;
    border-style: solid;
    border-width: 1px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.15);
    margin: 10px 5px;
    padding: 0 16px 16px;
    max-width: 468px
}

blockquote.twitter-tweet p {
    font-size: 16px;
    font-weight: normal;
    line-height: 20px
}

blockquote.twitter-tweet a {
    color: inherit;
    font-weight: normal;
    text-decoration: none;
    outline: 0 none
}

blockquote.twitter-tweet a:hover,blockquote.twitter-tweet a:focus {
    text-decoration: underline
}

blockquote.twitter-tweet {
    position: relative;
    background: white;
    padding: 72px 20px 28px !important;
    box-shadow: none;
    border: 1px solid #e1e8ed;
    border-radius: 4px;
    margin: 0;
    font-style: normal;
    text-align: left;
    width: 500px;
    max-width: 100%
}

@media (max-width: 369px) {
    blockquote.twitter-tweet {
        padding:60px 17.5px 21.5px !important
    }
}

blockquote.twitter-tweet:before {
    content: 'Follow';
    position: absolute;
    top: 20px;
    right: 20px;
    padding: 5.5px 12px 6.5px 33px;
    background: url("data:image/svg+xml,%3Csvg height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m18.89 7.012c.808-.496 1.343-1.173 1.605-2.034-.786.417-1.569.703-2.351.861-.703-.756-1.593-1.14-2.66-1.14-1.043 0-1.924.366-2.643 1.078-.715.717-1.076 1.588-1.076 2.605 0 .309.039.585.117.819-3.076-.105-5.622-1.381-7.628-3.837-.34.601-.51 1.213-.51 1.846 0 1.301.549 2.332 1.645 3.089-.625-.053-1.176-.211-1.645-.47 0 .929.273 1.705.82 2.388.549.676 1.254 1.107 2.115 1.291-.312.08-.641.118-.979.118-.312 0-.533-.026-.664-.083.23.757.664 1.371 1.291 1.841.625.472 1.344.721 2.152.743-1.332 1.045-2.855 1.562-4.578 1.562-.422 0-.721-.006-.902-.038 1.697 1.102 3.586 1.649 5.676 1.649 2.139 0 4.029-.542 5.674-1.626 1.645-1.078 2.859-2.408 3.639-3.974.784-1.564 1.172-3.192 1.172-4.892v-.468c.758-.57 1.371-1.212 1.84-1.921-.68.293-1.383.492-2.11.593z' fill='%23ccc'/%3E%3C/svg%3E") 9px center no-repeat;
    background-size: 21px;
    border: 1px solid #ccc;
    border-radius: 4px;
    color: #ccc;
    font-size: 14px
}

@media (max-width: 369px) {
    blockquote.twitter-tweet:before {
        display:none
    }
}

blockquote.twitter-tweet:after {
    content: '';
    position: absolute;
    top: 20px;
    left: 20px;
    width: 36px;
    height: 36px;
    background: #eee url("data:image/svg+xml,%3Csvg height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m12 12c2.21 0 4-1.795 4-4 0-2.21-1.79-4-4-4s-4 1.79-4 4c0 2.205 1.79 4 4 4zm0 2c-2.665 0-8 1.335-8 4v2h16v-2c0-2.665-5.335-4-8-4z' fill='%23444'/%3E%3C/svg%3E") center center no-repeat;
    border-radius: 4px
}

@media (max-width: 369px) {
    blockquote.twitter-tweet:after {
        top:17.5px;
        left: 17.5px
    }
}

blockquote.twitter-tweet p {
    white-space: pre-wrap;
    margin: 0 0 28px
}

@media (max-width: 369px) {
    blockquote.twitter-tweet p {
        font-size:14px;
        margin-bottom: 16px
    }
}

blockquote.twitter-tweet a {
    border: 0;
    box-shadow: none;
    color: #2b7bb9
}

blockquote.twitter-tweet>a {
    color: #888
}

</style>








<!-- slick js-->
<script>
    /*
 _ _      _       _
 ___| (_) ___| | __  (_)___
 / __| | |/ __| |/ /  | / __|
 \__ \ | | (__|   < _ | \__ \
 |___/_|_|\___|_|\_(_)/ |___/
 |__/

 Version: 1.9.0
 Author: Ken Wheeler
 Website: http://kenwheeler.github.io
 Docs: http://kenwheeler.github.io/slick
 Repo: http://github.com/kenwheeler/slick
 Issues: http://github.com/kenwheeler/slick/issues

 */
    /* global window, document, define, jQuery, setInterval, clearInterval */
    ;(function(factory) {
        'use strict';
        if (typeof define === 'function' && define.amd) {
            define(['jquery'], factory);
        } else if (typeof exports !== 'undefined') {
            module.exports = factory(require('jquery'));
        } else {
            factory(jQuery);
        }

    }(function($) {
        'use strict';
        var Slick = window.Slick || {};

        Slick = (function() {

            var instanceUid = 0;

            function Slick(element, settings) {

                var _ = this, dataSettings;

                _.defaults = {
                    accessibility: true,
                    adaptiveHeight: false,
                    appendArrows: $(element),
                    appendDots: $(element),
                    arrows: true,
                    asNavFor: null,
                    prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                    nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                    autoplay: false,
                    autoplaySpeed: 3000,
                    centerMode: false,
                    centerPadding: '50px',
                    cssEase: 'ease',
                    customPaging: function(slider, i) {
                        return $('<button type="button" />').text(i + 1);
                    },
                    dots: false,
                    dotsClass: 'slick-dots',
                    draggable: true,
                    easing: 'linear',
                    edgeFriction: 0.35,
                    fade: false,
                    focusOnSelect: false,
                    focusOnChange: false,
                    infinite: true,
                    initialSlide: 0,
                    lazyLoad: 'ondemand',
                    mobileFirst: false,
                    pauseOnHover: true,
                    pauseOnFocus: true,
                    pauseOnDotsHover: false,
                    respondTo: 'window',
                    responsive: null,
                    rows: 1,
                    rtl: false,
                    slide: '',
                    slidesPerRow: 1,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    speed: 500,
                    swipe: true,
                    swipeToSlide: false,
                    touchMove: true,
                    touchThreshold: 5,
                    useCSS: true,
                    useTransform: true,
                    variableWidth: false,
                    vertical: false,
                    verticalSwiping: false,
                    waitForAnimate: true,
                    zIndex: 1000
                };

                _.initials = {
                    animating: false,
                    dragging: false,
                    autoPlayTimer: null,
                    currentDirection: 0,
                    currentLeft: null,
                    currentSlide: 0,
                    direction: 1,
                    $dots: null,
                    listWidth: null,
                    listHeight: null,
                    loadIndex: 0,
                    $nextArrow: null,
                    $prevArrow: null,
                    scrolling: false,
                    slideCount: null,
                    slideWidth: null,
                    $slideTrack: null,
                    $slides: null,
                    sliding: false,
                    slideOffset: 0,
                    swipeLeft: null,
                    swiping: false,
                    $list: null,
                    touchObject: {},
                    transformsEnabled: false,
                    unslicked: false
                };

                $.extend(_, _.initials);

                _.activeBreakpoint = null;
                _.animType = null;
                _.animProp = null;
                _.breakpoints = [];
                _.breakpointSettings = [];
                _.cssTransitions = false;
                _.focussed = false;
                _.interrupted = false;
                _.hidden = 'hidden';
                _.paused = true;
                _.positionProp = null;
                _.respondTo = null;
                _.rowCount = 1;
                _.shouldClick = true;
                _.$slider = $(element);
                _.$slidesCache = null;
                _.transformType = null;
                _.transitionType = null;
                _.visibilityChange = 'visibilitychange';
                _.windowWidth = 0;
                _.windowTimer = null;

                dataSettings = $(element).data('slick') || {};

                _.options = $.extend({}, _.defaults, settings, dataSettings);

                _.currentSlide = _.options.initialSlide;

                _.originalSettings = _.options;

                if (typeof document.mozHidden !== 'undefined') {
                    _.hidden = 'mozHidden';
                    _.visibilityChange = 'mozvisibilitychange';
                } else if (typeof document.webkitHidden !== 'undefined') {
                    _.hidden = 'webkitHidden';
                    _.visibilityChange = 'webkitvisibilitychange';
                }

                _.autoPlay = $.proxy(_.autoPlay, _);
                _.autoPlayClear = $.proxy(_.autoPlayClear, _);
                _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
                _.changeSlide = $.proxy(_.changeSlide, _);
                _.clickHandler = $.proxy(_.clickHandler, _);
                _.selectHandler = $.proxy(_.selectHandler, _);
                _.setPosition = $.proxy(_.setPosition, _);
                _.swipeHandler = $.proxy(_.swipeHandler, _);
                _.dragHandler = $.proxy(_.dragHandler, _);
                _.keyHandler = $.proxy(_.keyHandler, _);

                _.instanceUid = instanceUid++;

                // A simple way to check for HTML strings
                // Strict HTML recognition (must start with <)
                // Extracted from jQuery v1.11 source
                _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


                _.registerBreakpoints();
                _.init(true);

            }

            return Slick;

        }());

        Slick.prototype.activateADA = function() {
            var _ = this;

            _.$slideTrack.find('.slick-active').attr({
                'aria-hidden': 'false'
            }).find('a, input, button, select').attr({
                'tabindex': '0'
            });

        };

        Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

            var _ = this;

            if (typeof(index) === 'boolean') {
                addBefore = index;
                index = null;
            } else if (index < 0 || (index >= _.slideCount)) {
                return false;
            }

            _.unload();

            if (typeof(index) === 'number') {
                if (index === 0 && _.$slides.length === 0) {
                    $(markup).appendTo(_.$slideTrack);
                } else if (addBefore) {
                    $(markup).insertBefore(_.$slides.eq(index));
                } else {
                    $(markup).insertAfter(_.$slides.eq(index));
                }
            } else {
                if (addBefore === true) {
                    $(markup).prependTo(_.$slideTrack);
                } else {
                    $(markup).appendTo(_.$slideTrack);
                }
            }

            _.$slides = _.$slideTrack.children(this.options.slide);

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.append(_.$slides);

            _.$slides.each(function(index, element) {
                $(element).attr('data-slick-index', index);
            });

            _.$slidesCache = _.$slides;

            _.reinit();

        };

        Slick.prototype.animateHeight = function() {
            var _ = this;
            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.animate({
                    height: targetHeight
                }, _.options.speed);
            }
        };

        Slick.prototype.animateSlide = function(targetLeft, callback) {

            var animProps = {},
                _ = this;

            _.animateHeight();

            if (_.options.rtl === true && _.options.vertical === false) {
                targetLeft = -targetLeft;
            }
            if (_.transformsEnabled === false) {
                if (_.options.vertical === false) {
                    _.$slideTrack.animate({
                        left: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                } else {
                    _.$slideTrack.animate({
                        top: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                }

            } else {

                if (_.cssTransitions === false) {
                    if (_.options.rtl === true) {
                        _.currentLeft = -(_.currentLeft);
                    }
                    $({
                        animStart: _.currentLeft
                    }).animate({
                        animStart: targetLeft
                    }, {
                        duration: _.options.speed,
                        easing: _.options.easing,
                        step: function(now) {
                            now = Math.ceil(now);
                            if (_.options.vertical === false) {
                                animProps[_.animType] = 'translate(' +
                                    now + 'px, 0px)';
                                _.$slideTrack.css(animProps);
                            } else {
                                animProps[_.animType] = 'translate(0px,' +
                                    now + 'px)';
                                _.$slideTrack.css(animProps);
                            }
                        },
                        complete: function() {
                            if (callback) {
                                callback.call();
                            }
                        }
                    });

                } else {

                    _.applyTransition();
                    targetLeft = Math.ceil(targetLeft);

                    if (_.options.vertical === false) {
                        animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                    } else {
                        animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                    }
                    _.$slideTrack.css(animProps);

                    if (callback) {
                        setTimeout(function() {

                            _.disableTransition();

                            callback.call();
                        }, _.options.speed);
                    }

                }

            }

        };

        Slick.prototype.getNavTarget = function() {

            var _ = this,
                asNavFor = _.options.asNavFor;

            if ( asNavFor && asNavFor !== null ) {
                asNavFor = $(asNavFor).not(_.$slider);
            }

            return asNavFor;

        };

        Slick.prototype.asNavFor = function(index) {

            var _ = this,
                asNavFor = _.getNavTarget();

            if ( asNavFor !== null && typeof asNavFor === 'object' ) {
                asNavFor.each(function() {
                    var target = $(this).slick('getSlick');
                    if(!target.unslicked) {
                        target.slideHandler(index, true);
                    }
                });
            }

        };

        Slick.prototype.applyTransition = function(slide) {

            var _ = this,
                transition = {};

            if (_.options.fade === false) {
                transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
            } else {
                transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
            }

            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }

        };

        Slick.prototype.autoPlay = function() {

            var _ = this;

            _.autoPlayClear();

            if ( _.slideCount > _.options.slidesToShow ) {
                _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
            }

        };

        Slick.prototype.autoPlayClear = function() {

            var _ = this;

            if (_.autoPlayTimer) {
                clearInterval(_.autoPlayTimer);
            }

        };

        Slick.prototype.autoPlayIterator = function() {

            var _ = this,
                slideTo = _.currentSlide + _.options.slidesToScroll;

            if ( !_.paused && !_.interrupted && !_.focussed ) {

                if ( _.options.infinite === false ) {

                    if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                        _.direction = 0;
                    }

                    else if ( _.direction === 0 ) {

                        slideTo = _.currentSlide - _.options.slidesToScroll;

                        if ( _.currentSlide - 1 === 0 ) {
                            _.direction = 1;
                        }

                    }

                }

                _.slideHandler( slideTo );

            }

        };

        Slick.prototype.BigdealArrows = function() {

            var _ = this;

            if (_.options.arrows === true ) {

                _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
                _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

                if( _.slideCount > _.options.slidesToShow ) {

                    _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                    _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                    if (_.htmlExpr.test(_.options.prevArrow)) {
                        _.$prevArrow.prependTo(_.options.appendArrows);
                    }

                    if (_.htmlExpr.test(_.options.nextArrow)) {
                        _.$nextArrow.appendTo(_.options.appendArrows);
                    }

                    if (_.options.infinite !== true) {
                        _.$prevArrow
                            .addClass('slick-disabled')
                            .attr('aria-disabled', 'true');
                    }

                } else {

                    _.$prevArrow.add( _.$nextArrow )

                        .addClass('slick-hidden')
                        .attr({
                            'aria-disabled': 'true',
                            'tabindex': '-1'
                        });

                }

            }

        };

        Slick.prototype.BigdealDots = function() {

            var _ = this,
                i, dot;

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$slider.addClass('slick-dotted');

                dot = $('<ul />').addClass(_.options.dotsClass);

                for (i = 0; i <= _.getDotCount(); i += 1) {
                    dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
                }

                _.$dots = dot.appendTo(_.options.appendDots);

                _.$dots.find('li').first().addClass('slick-active');

            }

        };

        Slick.prototype.BigdealOut = function() {

            var _ = this;

            _.$slides =
                _.$slider
                    .children( _.options.slide + ':not(.slick-cloned)')
                    .addClass('slick-slide');

            _.slideCount = _.$slides.length;

            _.$slides.each(function(index, element) {
                $(element)
                    .attr('data-slick-index', index)
                    .data('originalStyling', $(element).attr('style') || '');
            });

            _.$slider.addClass('slick-slider');

            _.$slideTrack = (_.slideCount === 0) ?
                $('<div class="slick-track"/>').appendTo(_.$slider) :
                _.$slides.wrapAll('<div class="slick-track"/>').parent();

            _.$list = _.$slideTrack.wrap(
                '<div class="slick-list"/>').parent();
            _.$slideTrack.css('opacity', 0);

            if (_.options.centerMode === true || _.options.swipeToSlide === true) {
                _.options.slidesToScroll = 1;
            }

            $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

            _.setupInfinite();

            _.BigdealArrows();

            _.BigdealDots();

            _.updateDots();


            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

            if (_.options.draggable === true) {
                _.$list.addClass('draggable');
            }

        };

        Slick.prototype.BigdealRows = function() {

            var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

            newSlides = document.createDocumentFragment();
            originalSlides = _.$slider.children();

            if(_.options.rows > 0) {

                slidesPerSection = _.options.slidesPerRow * _.options.rows;
                numOfSlides = Math.ceil(
                    originalSlides.length / slidesPerSection
                );

                for(a = 0; a < numOfSlides; a++){
                    var slide = document.createElement('div');
                    for(b = 0; b < _.options.rows; b++) {
                        var row = document.createElement('div');
                        for(c = 0; c < _.options.slidesPerRow; c++) {
                            var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                            if (originalSlides.get(target)) {
                                row.appendChild(originalSlides.get(target));
                            }
                        }
                        slide.appendChild(row);
                    }
                    newSlides.appendChild(slide);
                }

                _.$slider.empty().append(newSlides);
                _.$slider.children().children().children()
                    .css({
                        'width':(100 / _.options.slidesPerRow) + '%',
                        'display': 'inline-block'
                    });

            }

        };

        Slick.prototype.checkResponsive = function(initial, forceUpdate) {

            var _ = this,
                breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
            var sliderWidth = _.$slider.width();
            var windowWidth = window.innerWidth || $(window).width();

            if (_.respondTo === 'window') {
                respondToWidth = windowWidth;
            } else if (_.respondTo === 'slider') {
                respondToWidth = sliderWidth;
            } else if (_.respondTo === 'min') {
                respondToWidth = Math.min(windowWidth, sliderWidth);
            }

            if ( _.options.responsive &&
                _.options.responsive.length &&
                _.options.responsive !== null) {

                targetBreakpoint = null;

                for (breakpoint in _.breakpoints) {
                    if (_.breakpoints.hasOwnProperty(breakpoint)) {
                        if (_.originalSettings.mobileFirst === false) {
                            if (respondToWidth < _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        } else {
                            if (respondToWidth > _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        }
                    }
                }

                if (targetBreakpoint !== null) {
                    if (_.activeBreakpoint !== null) {
                        if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                            _.activeBreakpoint =
                                targetBreakpoint;
                            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                                _.unslick(targetBreakpoint);
                            } else {
                                _.options = $.extend({}, _.originalSettings,
                                    _.breakpointSettings[
                                        targetBreakpoint]);
                                if (initial === true) {
                                    _.currentSlide = _.options.initialSlide;
                                }
                                _.refresh(initial);
                            }
                            triggerBreakpoint = targetBreakpoint;
                        }
                    } else {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    if (_.activeBreakpoint !== null) {
                        _.activeBreakpoint = null;
                        _.options = _.originalSettings;
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                        triggerBreakpoint = targetBreakpoint;
                    }
                }

                // only trigger breakpoints during an actual break. not on initialize.
                if( !initial && triggerBreakpoint !== false ) {
                    _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
                }
            }

        };

        Slick.prototype.changeSlide = function(event, dontAnimate) {

            var _ = this,
                $target = $(event.currentTarget),
                indexOffset, slideOffset, unevenOffset;

            // If target is a link, prevent default action.
            if($target.is('a')) {
                event.preventDefault();
            }

            // If target is not the <li> element (ie: a child), find the <li>.
            if(!$target.is('li')) {
                $target = $target.closest('li');
            }

            unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
            indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

            switch (event.data.message) {

                case 'previous':
                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                    if (_.slideCount > _.options.slidesToShow) {
                        _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                    }
                    break;

                case 'next':
                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                    if (_.slideCount > _.options.slidesToShow) {
                        _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                    }
                    break;

                case 'index':
                    var index = event.data.index === 0 ? 0 :
                        event.data.index || $target.index() * _.options.slidesToScroll;

                    _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                    $target.children().trigger('focus');
                    break;

                default:
                    return;
            }

        };

        Slick.prototype.checkNavigable = function(index) {

            var _ = this,
                navigables, prevNavigable;

            navigables = _.getNavigableIndexes();
            prevNavigable = 0;
            if (index > navigables[navigables.length - 1]) {
                index = navigables[navigables.length - 1];
            } else {
                for (var n in navigables) {
                    if (index < navigables[n]) {
                        index = prevNavigable;
                        break;
                    }
                    prevNavigable = navigables[n];
                }
            }

            return index;
        };

        Slick.prototype.cleanUpEvents = function() {

            var _ = this;

            if (_.options.dots && _.$dots !== null) {

                $('li', _.$dots)
                    .off('click.slick', _.changeSlide)
                    .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                    .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

                if (_.options.accessibility === true) {
                    _.$dots.off('keydown.slick', _.keyHandler);
                }
            }

            _.$slider.off('focus.slick blur.slick');

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
                _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

                if (_.options.accessibility === true) {
                    _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                    _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
                }
            }

            _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
            _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
            _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
            _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

            _.$list.off('click.slick', _.clickHandler);

            $(document).off(_.visibilityChange, _.visibility);

            _.cleanUpSlideEvents();

            if (_.options.accessibility === true) {
                _.$list.off('keydown.slick', _.keyHandler);
            }

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().off('click.slick', _.selectHandler);
            }

            $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

            $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

            $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

            $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

        };

        Slick.prototype.cleanUpSlideEvents = function() {

            var _ = this;

            _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

        };

        Slick.prototype.cleanUpRows = function() {

            var _ = this, originalSlides;

            if(_.options.rows > 0) {
                originalSlides = _.$slides.children().children();
                originalSlides.removeAttr('style');
                _.$slider.empty().append(originalSlides);
            }

        };

        Slick.prototype.clickHandler = function(event) {

            var _ = this;

            if (_.shouldClick === false) {
                event.stopImmediatePropagation();
                event.stopPropagation();
                event.preventDefault();
            }

        };

        Slick.prototype.destroy = function(refresh) {

            var _ = this;

            _.autoPlayClear();

            _.touchObject = {};

            _.cleanUpEvents();

            $('.slick-cloned', _.$slider).detach();

            if (_.$dots) {
                _.$dots.remove();
            }

            if ( _.$prevArrow && _.$prevArrow.length ) {

                _.$prevArrow
                    .removeClass('slick-disabled slick-arrow slick-hidden')
                    .removeAttr('aria-hidden aria-disabled tabindex')
                    .css('display','');

                if ( _.htmlExpr.test( _.options.prevArrow )) {
                    _.$prevArrow.remove();
                }
            }

            if ( _.$nextArrow && _.$nextArrow.length ) {

                _.$nextArrow
                    .removeClass('slick-disabled slick-arrow slick-hidden')
                    .removeAttr('aria-hidden aria-disabled tabindex')
                    .css('display','');

                if ( _.htmlExpr.test( _.options.nextArrow )) {
                    _.$nextArrow.remove();
                }
            }


            if (_.$slides) {

                _.$slides
                    .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                    .removeAttr('aria-hidden')
                    .removeAttr('data-slick-index')
                    .each(function(){
                        $(this).attr('style', $(this).data('originalStyling'));
                    });

                _.$slideTrack.children(this.options.slide).detach();

                _.$slideTrack.detach();

                _.$list.detach();

                _.$slider.append(_.$slides);
            }

            _.cleanUpRows();

            _.$slider.removeClass('slick-slider');
            _.$slider.removeClass('slick-initialized');
            _.$slider.removeClass('slick-dotted');

            _.unslicked = true;

            if(!refresh) {
                _.$slider.trigger('destroy', [_]);
            }

        };

        Slick.prototype.disableTransition = function(slide) {

            var _ = this,
                transition = {};

            transition[_.transitionType] = '';

            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }

        };

        Slick.prototype.fadeSlide = function(slideIndex, callback) {

            var _ = this;

            if (_.cssTransitions === false) {

                _.$slides.eq(slideIndex).css({
                    zIndex: _.options.zIndex
                });

                _.$slides.eq(slideIndex).animate({
                    opacity: 1
                }, _.options.speed, _.options.easing, callback);

            } else {

                _.applyTransition(slideIndex);

                _.$slides.eq(slideIndex).css({
                    opacity: 1,
                    zIndex: _.options.zIndex
                });

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition(slideIndex);

                        callback.call();
                    }, _.options.speed);
                }

            }

        };

        Slick.prototype.fadeSlideOut = function(slideIndex) {

            var _ = this;

            if (_.cssTransitions === false) {

                _.$slides.eq(slideIndex).animate({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                }, _.options.speed, _.options.easing);

            } else {

                _.applyTransition(slideIndex);

                _.$slides.eq(slideIndex).css({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                });

            }

        };

        Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

            var _ = this;

            if (filter !== null) {

                _.$slidesCache = _.$slides;

                _.unload();

                _.$slideTrack.children(this.options.slide).detach();

                _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

                _.reinit();

            }

        };

        Slick.prototype.focusHandler = function() {

            var _ = this;

            // If any child element receives focus within the slider we need to pause the autoplay
            _.$slider
                .off('focus.slick blur.slick')
                .on(
                    'focus.slick',
                    '*',
                    function(event) {
                        var $sf = $(this);

                        setTimeout(function() {
                            if( _.options.pauseOnFocus ) {
                                if ($sf.is(':focus')) {
                                    _.focussed = true;
                                    _.autoPlay();
                                }
                            }
                        }, 0);
                    }
                ).on(
                'blur.slick',
                '*',
                function(event) {
                    var $sf = $(this);

                    // When a blur occurs on any elements within the slider we become unfocused
                    if( _.options.pauseOnFocus ) {
                        _.focussed = false;
                        _.autoPlay();
                    }
                }
            );
        };

        Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

            var _ = this;
            return _.currentSlide;

        };

        Slick.prototype.getDotCount = function() {

            var _ = this;

            var breakPoint = 0;
            var counter = 0;
            var pagerQty = 0;

            if (_.options.infinite === true) {
                if (_.slideCount <= _.options.slidesToShow) {
                    ++pagerQty;
                } else {
                    while (breakPoint < _.slideCount) {
                        ++pagerQty;
                        breakPoint = counter + _.options.slidesToScroll;
                        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                    }
                }
            } else if (_.options.centerMode === true) {
                pagerQty = _.slideCount;
            } else if(!_.options.asNavFor) {
                pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
            }else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }

            return pagerQty - 1;

        };

        Slick.prototype.getLeft = function(slideIndex) {

            var _ = this,
                targetLeft,
                verticalHeight,
                verticalOffset = 0,
                targetSlide,
                coef;

            _.slideOffset = 0;
            verticalHeight = _.$slides.first().outerHeight(true);

            if (_.options.infinite === true) {
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                    coef = -1

                    if (_.options.vertical === true && _.options.centerMode === true) {
                        if (_.options.slidesToShow === 2) {
                            coef = -1.5;
                        } else if (_.options.slidesToShow === 1) {
                            coef = -2
                        }
                    }
                    verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
                }
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                        if (slideIndex > _.slideCount) {
                            _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                            verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                        } else {
                            _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                            verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                        }
                    }
                }
            } else {
                if (slideIndex + _.options.slidesToShow > _.slideCount) {
                    _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                    verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
                }
            }

            if (_.slideCount <= _.options.slidesToShow) {
                _.slideOffset = 0;
                verticalOffset = 0;
            }

            if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
                _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
            } else if (_.options.centerMode === true && _.options.infinite === true) {
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
            } else if (_.options.centerMode === true) {
                _.slideOffset = 0;
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
            }

            if (_.options.vertical === false) {
                targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
            } else {
                targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
            }

            if (_.options.variableWidth === true) {

                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                if (_.options.centerMode === true) {
                    if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                    } else {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                    }

                    if (_.options.rtl === true) {
                        if (targetSlide[0]) {
                            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                        } else {
                            targetLeft =  0;
                        }
                    } else {
                        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                    }

                    targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
                }
            }

            return targetLeft;

        };

        Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

            var _ = this;

            return _.options[option];

        };

        Slick.prototype.getNavigableIndexes = function() {

            var _ = this,
                breakPoint = 0,
                counter = 0,
                indexes = [],
                max;

            if (_.options.infinite === false) {
                max = _.slideCount;
            } else {
                breakPoint = _.options.slidesToScroll * -1;
                counter = _.options.slidesToScroll * -1;
                max = _.slideCount * 2;
            }

            while (breakPoint < max) {
                indexes.push(breakPoint);
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }

            return indexes;

        };

        Slick.prototype.getSlick = function() {

            return this;

        };

        Slick.prototype.getSlideCount = function() {

            var _ = this,
                slidesTraversed, swipedSlide, swipeTarget, centerOffset;

            centerOffset = _.options.centerMode === true ? Math.floor(_.$list.width() / 2) : 0;
            swipeTarget = (_.swipeLeft * -1) + centerOffset;

            if (_.options.swipeToSlide === true) {

                _.$slideTrack.find('.slick-slide').each(function(index, slide) {

                    var slideOuterWidth, slideOffset, slideRightBoundary;
                    slideOuterWidth = $(slide).outerWidth();
                    slideOffset = slide.offsetLeft;
                    if (_.options.centerMode !== true) {
                        slideOffset += (slideOuterWidth / 2);
                    }

                    slideRightBoundary = slideOffset + (slideOuterWidth);

                    if (swipeTarget < slideRightBoundary) {
                        swipedSlide = slide;
                        return false;
                    }
                });

                slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

                return slidesTraversed;

            } else {
                return _.options.slidesToScroll;
            }

        };

        Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

            var _ = this;

            _.changeSlide({
                data: {
                    message: 'index',
                    index: parseInt(slide)
                }
            }, dontAnimate);

        };

        Slick.prototype.init = function(creation) {

            var _ = this;

            if (!$(_.$slider).hasClass('slick-initialized')) {

                $(_.$slider).addClass('slick-initialized');

                _.BigdealRows();
                _.BigdealOut();
                _.setProps();
                _.startLoad();
                _.loadSlider();
                _.initializeEvents();
                _.updateArrows();
                _.updateDots();
                _.checkResponsive(true);
                _.focusHandler();

            }

            if (creation) {
                _.$slider.trigger('init', [_]);
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }

            if ( _.options.autoplay ) {

                _.paused = false;
                _.autoPlay();

            }

        };

        Slick.prototype.initADA = function() {
            var _ = this,
                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
                    return (val >= 0) && (val < _.slideCount);
                });

            _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
                'aria-hidden': 'true',
                'tabindex': '-1'
            }).find('a, input, button, select').attr({
                'tabindex': '-1'
            });

            if (_.$dots !== null) {
                _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                    var slideControlIndex = tabControlIndexes.indexOf(i);

                    $(this).attr({
                        'role': 'tabpanel',
                        'id': 'slick-slide' + _.instanceUid + i,
                        'tabindex': -1
                    });

                    if (slideControlIndex !== -1) {
                        var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex
                        if ($('#' + ariaButtonControl).length) {
                            $(this).attr({
                                'aria-describedby': ariaButtonControl
                            });
                        }
                    }
                });

                _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                    var mappedSlideIndex = tabControlIndexes[i];

                    $(this).attr({
                        'role': 'presentation'
                    });

                    $(this).find('button').first().attr({
                        'role': 'tab',
                        'id': 'slick-slide-control' + _.instanceUid + i,
                        'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                        'aria-label': (i + 1) + ' of ' + numDotGroups,
                        'aria-selected': null,
                        'tabindex': '-1'
                    });

                }).eq(_.currentSlide).find('button').attr({
                    'aria-selected': 'true',
                    'tabindex': '0'
                }).end();
            }

            for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
                if (_.options.focusOnChange) {
                    _.$slides.eq(i).attr({'tabindex': '0'});
                } else {
                    _.$slides.eq(i).removeAttr('tabindex');
                }
            }

            _.activateADA();

        };

        Slick.prototype.initArrowEvents = function() {

            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow
                    .off('click.slick')
                    .on('click.slick', {
                        message: 'previous'
                    }, _.changeSlide);
                _.$nextArrow
                    .off('click.slick')
                    .on('click.slick', {
                        message: 'next'
                    }, _.changeSlide);

                if (_.options.accessibility === true) {
                    _.$prevArrow.on('keydown.slick', _.keyHandler);
                    _.$nextArrow.on('keydown.slick', _.keyHandler);
                }
            }

        };

        Slick.prototype.initDotEvents = function() {

            var _ = this;

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
                $('li', _.$dots).on('click.slick', {
                    message: 'index'
                }, _.changeSlide);

                if (_.options.accessibility === true) {
                    _.$dots.on('keydown.slick', _.keyHandler);
                }
            }

            if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {

                $('li', _.$dots)
                    .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                    .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

            }

        };

        Slick.prototype.initSlideEvents = function() {

            var _ = this;

            if ( _.options.pauseOnHover ) {

                _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
                _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

            }

        };

        Slick.prototype.initializeEvents = function() {

            var _ = this;

            _.initArrowEvents();

            _.initDotEvents();
            _.initSlideEvents();

            _.$list.on('touchstart.slick mousedown.slick', {
                action: 'start'
            }, _.swipeHandler);
            _.$list.on('touchmove.slick mousemove.slick', {
                action: 'move'
            }, _.swipeHandler);
            _.$list.on('touchend.slick mouseup.slick', {
                action: 'end'
            }, _.swipeHandler);
            _.$list.on('touchcancel.slick mouseleave.slick', {
                action: 'end'
            }, _.swipeHandler);

            _.$list.on('click.slick', _.clickHandler);

            $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

            if (_.options.accessibility === true) {
                _.$list.on('keydown.slick', _.keyHandler);
            }

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }

            $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

            $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

            $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

            $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
            $(_.setPosition);

        };

        Slick.prototype.initUI = function() {

            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

                _.$prevArrow.show();
                _.$nextArrow.show();

            }

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$dots.show();

            }

        };

        Slick.prototype.keyHandler = function(event) {

            var _ = this;
            //Dont slide if the cursor is inside the form fields and arrow keys are pressed
            if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
                if (event.keyCode === 37 && _.options.accessibility === true) {
                    _.changeSlide({
                        data: {
                            message: _.options.rtl === true ? 'next' :  'previous'
                        }
                    });
                } else if (event.keyCode === 39 && _.options.accessibility === true) {
                    _.changeSlide({
                        data: {
                            message: _.options.rtl === true ? 'previous' : 'next'
                        }
                    });
                }
            }

        };

        Slick.prototype.lazyLoad = function() {

            var _ = this,
                loadRange, cloneRange, rangeStart, rangeEnd;

            function loadImages(imagesScope) {

                $('img[data-lazy]', imagesScope).each(function() {

                    var image = $(this),
                        imageSource = $(this).attr('data-lazy'),
                        imageSrcSet = $(this).attr('data-srcset'),
                        imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                        imageToLoad = document.createElement('img');

                    imageToLoad.onload = function() {

                        image
                            .animate({ opacity: 0 }, 100, function() {

                                if (imageSrcSet) {
                                    image
                                        .attr('srcset', imageSrcSet );

                                    if (imageSizes) {
                                        image
                                            .attr('sizes', imageSizes );
                                    }
                                }

                                image
                                    .attr('src', imageSource)
                                    .animate({ opacity: 1 }, 200, function() {
                                        image
                                            .removeAttr('data-lazy data-srcset data-sizes')
                                            .removeClass('slick-loading');
                                    });
                                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                            });

                    };

                    imageToLoad.onerror = function() {

                        image
                            .removeAttr( 'data-lazy' )
                            .removeClass( 'slick-loading' )
                            .addClass( 'slick-lazyload-error' );

                        _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    };

                    imageToLoad.src = imageSource;

                });

            }

            if (_.options.centerMode === true) {
                if (_.options.infinite === true) {
                    rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                    rangeEnd = rangeStart + _.options.slidesToShow + 2;
                } else {
                    rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                    rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
                }
            } else {
                rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
                rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
                if (_.options.fade === true) {
                    if (rangeStart > 0) rangeStart--;
                    if (rangeEnd <= _.slideCount) rangeEnd++;
                }
            }

            loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

            if (_.options.lazyLoad === 'anticipated') {
                var prevSlide = rangeStart - 1,
                    nextSlide = rangeEnd,
                    $slides = _.$slider.find('.slick-slide');

                for (var i = 0; i < _.options.slidesToScroll; i++) {
                    if (prevSlide < 0) prevSlide = _.slideCount - 1;
                    loadRange = loadRange.add($slides.eq(prevSlide));
                    loadRange = loadRange.add($slides.eq(nextSlide));
                    prevSlide--;
                    nextSlide++;
                }
            }

            loadImages(loadRange);

            if (_.slideCount <= _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-slide');
                loadImages(cloneRange);
            } else
            if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
                loadImages(cloneRange);
            } else if (_.currentSlide === 0) {
                cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
                loadImages(cloneRange);
            }

        };

        Slick.prototype.loadSlider = function() {

            var _ = this;

            _.setPosition();

            _.$slideTrack.css({
                opacity: 1
            });

            _.$slider.removeClass('slick-loading');

            _.initUI();

            if (_.options.lazyLoad === 'progressive') {
                _.progressiveLazyLoad();
            }

        };

        Slick.prototype.next = Slick.prototype.slickNext = function() {

            var _ = this;

            _.changeSlide({
                data: {
                    message: 'next'
                }
            });

        };

        Slick.prototype.orientationChange = function() {

            var _ = this;

            _.checkResponsive();
            _.setPosition();

        };

        Slick.prototype.pause = Slick.prototype.slickPause = function() {

            var _ = this;

            _.autoPlayClear();
            _.paused = true;

        };

        Slick.prototype.play = Slick.prototype.slickPlay = function() {

            var _ = this;

            _.autoPlay();
            _.options.autoplay = true;
            _.paused = false;
            _.focussed = false;
            _.interrupted = false;

        };

        Slick.prototype.postSlide = function(index) {

            var _ = this;

            if( !_.unslicked ) {

                _.$slider.trigger('afterChange', [_, index]);

                _.animating = false;

                if (_.slideCount > _.options.slidesToShow) {
                    _.setPosition();
                }

                _.swipeLeft = null;

                if ( _.options.autoplay ) {
                    _.autoPlay();
                }

                if (_.options.accessibility === true) {
                    _.initADA();

                    if (_.options.focusOnChange) {
                        var $currentSlide = $(_.$slides.get(_.currentSlide));
                        $currentSlide.attr('tabindex', 0).focus();
                    }
                }

            }

        };

        Slick.prototype.prev = Slick.prototype.slickPrev = function() {

            var _ = this;

            _.changeSlide({
                data: {
                    message: 'previous'
                }
            });

        };

        Slick.prototype.preventDefault = function(event) {

            event.preventDefault();

        };

        Slick.prototype.progressiveLazyLoad = function( tryCount ) {

            tryCount = tryCount || 1;

            var _ = this,
                $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
                image,
                imageSource,
                imageSrcSet,
                imageSizes,
                imageToLoad;

            if ( $imgsToLoad.length ) {

                image = $imgsToLoad.first();
                imageSource = image.attr('data-lazy');
                imageSrcSet = image.attr('data-srcset');
                imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
                imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    if (imageSrcSet) {
                        image
                            .attr('srcset', imageSrcSet );

                        if (imageSizes) {
                            image
                                .attr('sizes', imageSizes );
                        }
                    }

                    image
                        .attr( 'src', imageSource )
                        .removeAttr('data-lazy data-srcset data-sizes')
                        .removeClass('slick-loading');

                    if ( _.options.adaptiveHeight === true ) {
                        _.setPosition();
                    }

                    _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                    _.progressiveLazyLoad();

                };

                imageToLoad.onerror = function() {

                    if ( tryCount < 3 ) {

                        /**
                         * try to load the image 3 times,
                         * leave a slight delay so we don't get
                         * servers blocking the request.
                         */
                        setTimeout( function() {
                            _.progressiveLazyLoad( tryCount + 1 );
                        }, 500 );

                    } else {

                        image
                            .removeAttr( 'data-lazy' )
                            .removeClass( 'slick-loading' )
                            .addClass( 'slick-lazyload-error' );

                        _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                        _.progressiveLazyLoad();

                    }

                };

                imageToLoad.src = imageSource;

            } else {

                _.$slider.trigger('allImagesLoaded', [ _ ]);

            }

        };

        Slick.prototype.refresh = function( initializing ) {

            var _ = this, currentSlide, lastVisibleIndex;

            lastVisibleIndex = _.slideCount - _.options.slidesToShow;

            // in non-infinite sliders, we don't want to go past the
            // last visible index.
            if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
                _.currentSlide = lastVisibleIndex;
            }

            // if less slides than to show, go to start.
            if ( _.slideCount <= _.options.slidesToShow ) {
                _.currentSlide = 0;

            }

            currentSlide = _.currentSlide;

            _.destroy(true);

            $.extend(_, _.initials, { currentSlide: currentSlide });

            _.init();

            if( !initializing ) {

                _.changeSlide({
                    data: {
                        message: 'index',
                        index: currentSlide
                    }
                }, false);

            }

        };

        Slick.prototype.registerBreakpoints = function() {

            var _ = this, breakpoint, currentBreakpoint, l,
                responsiveSettings = _.options.responsive || null;

            if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

                _.respondTo = _.options.respondTo || 'window';

                for ( breakpoint in responsiveSettings ) {

                    l = _.breakpoints.length-1;

                    if (responsiveSettings.hasOwnProperty(breakpoint)) {
                        currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                        // loop through the breakpoints and cut out any existing
                        // ones with the same breakpoint number, we don't want dupes.
                        while( l >= 0 ) {
                            if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                                _.breakpoints.splice(l,1);
                            }
                            l--;
                        }

                        _.breakpoints.push(currentBreakpoint);
                        _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                    }

                }

                _.breakpoints.sort(function(a, b) {
                    return ( _.options.mobileFirst ) ? a-b : b-a;
                });

            }

        };

        Slick.prototype.reinit = function() {

            var _ = this;

            _.$slides =
                _.$slideTrack
                    .children(_.options.slide)
                    .addClass('slick-slide');

            _.slideCount = _.$slides.length;

            if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
                _.currentSlide = _.currentSlide - _.options.slidesToScroll;
            }

            if (_.slideCount <= _.options.slidesToShow) {
                _.currentSlide = 0;
            }

            _.registerBreakpoints();

            _.setProps();
            _.setupInfinite();
            _.BigdealArrows();
            _.updateArrows();
            _.initArrowEvents();
            _.BigdealDots();
            _.updateDots();
            _.initDotEvents();
            _.cleanUpSlideEvents();
            _.initSlideEvents();

            _.checkResponsive(false, true);

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }

            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

            _.setPosition();
            _.focusHandler();

            _.paused = !_.options.autoplay;
            _.autoPlay();

            _.$slider.trigger('reInit', [_]);

        };

        Slick.prototype.resize = function() {

            var _ = this;

            if ($(window).width() !== _.windowWidth) {
                clearTimeout(_.windowDelay);
                _.windowDelay = window.setTimeout(function() {
                    _.windowWidth = $(window).width();
                    _.checkResponsive();
                    if( !_.unslicked ) { _.setPosition(); }
                }, 50);
            }
        };

        Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

            var _ = this;

            if (typeof(index) === 'boolean') {
                removeBefore = index;
                index = removeBefore === true ? 0 : _.slideCount - 1;
            } else {
                index = removeBefore === true ? --index : index;
            }

            if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
                return false;
            }

            _.unload();

            if (removeAll === true) {
                _.$slideTrack.children().remove();
            } else {
                _.$slideTrack.children(this.options.slide).eq(index).remove();
            }

            _.$slides = _.$slideTrack.children(this.options.slide);

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.append(_.$slides);

            _.$slidesCache = _.$slides;

            _.reinit();

        };

        Slick.prototype.setCSS = function(position) {

            var _ = this,
                positionProps = {},
                x, y;

            if (_.options.rtl === true) {
                position = -position;
            }
            x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
            y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

            positionProps[_.positionProp] = position;

            if (_.transformsEnabled === false) {
                _.$slideTrack.css(positionProps);
            } else {
                positionProps = {};
                if (_.cssTransitions === false) {
                    positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                    _.$slideTrack.css(positionProps);
                } else {
                    positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                    _.$slideTrack.css(positionProps);
                }
            }

        };

        Slick.prototype.setDimensions = function() {

            var _ = this;

            if (_.options.vertical === false) {
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: ('0px ' + _.options.centerPadding)
                    });
                }
            } else {
                _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: (_.options.centerPadding + ' 0px')
                    });
                }
            }

            _.listWidth = _.$list.width();
            _.listHeight = _.$list.height();


            if (_.options.vertical === false && _.options.variableWidth === false) {
                _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
                _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

            } else if (_.options.variableWidth === true) {
                _.$slideTrack.width(5000 * _.slideCount);
            } else {
                _.slideWidth = Math.ceil(_.listWidth);
                _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
            }

            var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
            if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

        };

        Slick.prototype.setFade = function() {

            var _ = this,
                targetLeft;

            _.$slides.each(function(index, element) {
                targetLeft = (_.slideWidth * index) * -1;
                if (_.options.rtl === true) {
                    $(element).css({
                        position: 'relative',
                        right: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                } else {
                    $(element).css({
                        position: 'relative',
                        left: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                }
            });

            _.$slides.eq(_.currentSlide).css({
                zIndex: _.options.zIndex - 1,
                opacity: 1
            });

        };

        Slick.prototype.setHeight = function() {

            var _ = this;

            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.css('height', targetHeight);
            }

        };

        Slick.prototype.setOption =
            Slick.prototype.slickSetOption = function() {

                /**
                 * accepts arguments in format of:
                 *
                 *  - for changing a single option's value:
                 *     .slick("setOption", option, value, refresh )
                 *
                 *  - for changing a set of responsive options:
                 *     .slick("setOption", 'responsive', [{}, ...], refresh )
                 *
                 *  - for updating multiple values at once (not responsive)
                 *     .slick("setOption", { 'option': value, ... }, refresh )
                 */

                var _ = this, l, item, option, value, refresh = false, type;

                if( $.type( arguments[0] ) === 'object' ) {

                    option =  arguments[0];
                    refresh = arguments[1];
                    type = 'multiple';

                } else if ( $.type( arguments[0] ) === 'string' ) {

                    option =  arguments[0];
                    value = arguments[1];
                    refresh = arguments[2];

                    if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                        type = 'responsive';

                    } else if ( typeof arguments[1] !== 'undefined' ) {

                        type = 'single';

                    }

                }

                if ( type === 'single' ) {

                    _.options[option] = value;


                } else if ( type === 'multiple' ) {

                    $.each( option , function( opt, val ) {

                        _.options[opt] = val;

                    });


                } else if ( type === 'responsive' ) {

                    for ( item in value ) {

                        if( $.type( _.options.responsive ) !== 'array' ) {

                            _.options.responsive = [ value[item] ];

                        } else {

                            l = _.options.responsive.length-1;

                            // loop through the responsive object and splice out duplicates.
                            while( l >= 0 ) {

                                if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                                    _.options.responsive.splice(l,1);

                                }

                                l--;

                            }

                            _.options.responsive.push( value[item] );

                        }

                    }

                }

                if ( refresh ) {

                    _.unload();
                    _.reinit();

                }

            };

        Slick.prototype.setPosition = function() {

            var _ = this;

            _.setDimensions();

            _.setHeight();

            if (_.options.fade === false) {
                _.setCSS(_.getLeft(_.currentSlide));
            } else {
                _.setFade();
            }

            _.$slider.trigger('setPosition', [_]);

        };

        Slick.prototype.setProps = function() {

            var _ = this,
                bodyStyle = document.body.style;

            _.positionProp = _.options.vertical === true ? 'top' : 'left';

            if (_.positionProp === 'top') {
                _.$slider.addClass('slick-vertical');
            } else {
                _.$slider.removeClass('slick-vertical');
            }

            if (bodyStyle.WebkitTransition !== undefined ||
                bodyStyle.MozTransition !== undefined ||
                bodyStyle.msTransition !== undefined) {
                if (_.options.useCSS === true) {
                    _.cssTransitions = true;
                }
            }

            if ( _.options.fade ) {
                if ( typeof _.options.zIndex === 'number' ) {
                    if( _.options.zIndex < 3 ) {
                        _.options.zIndex = 3;
                    }
                } else {
                    _.options.zIndex = _.defaults.zIndex;
                }
            }

            if (bodyStyle.OTransform !== undefined) {
                _.animType = 'OTransform';
                _.transformType = '-o-transform';
                _.transitionType = 'OTransition';
                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.MozTransform !== undefined) {
                _.animType = 'MozTransform';
                _.transformType = '-moz-transform';
                _.transitionType = 'MozTransition';
                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.webkitTransform !== undefined) {
                _.animType = 'webkitTransform';
                _.transformType = '-webkit-transform';
                _.transitionType = 'webkitTransition';
                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.msTransform !== undefined) {
                _.animType = 'msTransform';
                _.transformType = '-ms-transform';
                _.transitionType = 'msTransition';
                if (bodyStyle.msTransform === undefined) _.animType = false;
            }
            if (bodyStyle.transform !== undefined && _.animType !== false) {
                _.animType = 'transform';
                _.transformType = 'transform';
                _.transitionType = 'transition';
            }
            _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
        };


        Slick.prototype.setSlideClasses = function(index) {

            var _ = this,
                centerOffset, allSlides, indexOffset, remainder;

            allSlides = _.$slider
                .find('.slick-slide')
                .removeClass('slick-active slick-center slick-current')
                .attr('aria-hidden', 'true');

            _.$slides
                .eq(index)
                .addClass('slick-current');

            if (_.options.centerMode === true) {

                var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

                centerOffset = Math.floor(_.options.slidesToShow / 2);

                if (_.options.infinite === true) {

                    if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
                        _.$slides
                            .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    } else {

                        indexOffset = _.options.slidesToShow + index;
                        allSlides
                            .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    }

                    if (index === 0) {

                        allSlides
                            .eq(allSlides.length - 1 - _.options.slidesToShow)
                            .addClass('slick-center');

                    } else if (index === _.slideCount - 1) {

                        allSlides
                            .eq(_.options.slidesToShow)
                            .addClass('slick-center');

                    }

                }

                _.$slides
                    .eq(index)
                    .addClass('slick-center');

            } else {

                if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                    _.$slides
                        .slice(index, index + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else if (allSlides.length <= _.options.slidesToShow) {

                    allSlides
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    remainder = _.slideCount % _.options.slidesToShow;
                    indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                    if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                        allSlides
                            .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    } else {

                        allSlides
                            .slice(indexOffset, indexOffset + _.options.slidesToShow)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    }

                }

            }

            if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
                _.lazyLoad();
            }
        };

        Slick.prototype.setupInfinite = function() {

            var _ = this,
                i, slideIndex, infiniteCount;

            if (_.options.fade === true) {
                _.options.centerMode = false;
            }

            if (_.options.infinite === true && _.options.fade === false) {

                slideIndex = null;

                if (_.slideCount > _.options.slidesToShow) {

                    if (_.options.centerMode === true) {
                        infiniteCount = _.options.slidesToShow + 1;
                    } else {
                        infiniteCount = _.options.slidesToShow;
                    }

                    for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                        slideIndex = i - 1;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex - _.slideCount)
                            .prependTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
                        slideIndex = i;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex + _.slideCount)
                            .appendTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                        $(this).attr('id', '');
                    });

                }

            }

        };

        Slick.prototype.interrupt = function( toggle ) {

            var _ = this;

            if( !toggle ) {
                _.autoPlay();
            }
            _.interrupted = toggle;

        };

        Slick.prototype.selectHandler = function(event) {

            var _ = this;

            var targetElement =
                $(event.target).is('.slick-slide') ?
                    $(event.target) :
                    $(event.target).parents('.slick-slide');

            var index = parseInt(targetElement.attr('data-slick-index'));

            if (!index) index = 0;

            if (_.slideCount <= _.options.slidesToShow) {

                _.slideHandler(index, false, true);
                return;

            }

            _.slideHandler(index);

        };

        Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

            var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
                _ = this, navTarget;

            sync = sync || false;

            if (_.animating === true && _.options.waitForAnimate === true) {
                return;
            }

            if (_.options.fade === true && _.currentSlide === index) {
                return;
            }

            if (sync === false) {
                _.asNavFor(index);
            }

            targetSlide = index;
            targetLeft = _.getLeft(targetSlide);
            slideLeft = _.getLeft(_.currentSlide);

            _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

            if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                        _.animateSlide(slideLeft, function() {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                        _.animateSlide(slideLeft, function() {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            }

            if ( _.options.autoplay ) {
                clearInterval(_.autoPlayTimer);
            }

            if (targetSlide < 0) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
                } else {
                    animSlide = _.slideCount + targetSlide;
                }
            } else if (targetSlide >= _.slideCount) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = 0;
                } else {
                    animSlide = targetSlide - _.slideCount;
                }
            } else {
                animSlide = targetSlide;
            }

            _.animating = true;

            _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

            oldSlide = _.currentSlide;
            _.currentSlide = animSlide;

            _.setSlideClasses(_.currentSlide);

            if ( _.options.asNavFor ) {

                navTarget = _.getNavTarget();
                navTarget = navTarget.slick('getSlick');

                if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                    navTarget.setSlideClasses(_.currentSlide);
                }

            }

            _.updateDots();
            _.updateArrows();

            if (_.options.fade === true) {
                if (dontAnimate !== true) {

                    _.fadeSlideOut(oldSlide);

                    _.fadeSlide(animSlide, function() {
                        _.postSlide(animSlide);
                    });

                } else {
                    _.postSlide(animSlide);
                }
                _.animateHeight();
                return;
            }

            if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                _.animateSlide(targetLeft, function() {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }

        };

        Slick.prototype.startLoad = function() {

            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

                _.$prevArrow.hide();
                _.$nextArrow.hide();

            }

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$dots.hide();

            }

            _.$slider.addClass('slick-loading');

        };

        Slick.prototype.swipeDirection = function() {

            var xDist, yDist, r, swipeAngle, _ = this;

            xDist = _.touchObject.startX - _.touchObject.curX;
            yDist = _.touchObject.startY - _.touchObject.curY;
            r = Math.atan2(yDist, xDist);

            swipeAngle = Math.round(r * 180 / Math.PI);
            if (swipeAngle < 0) {
                swipeAngle = 360 - Math.abs(swipeAngle);
            }

            if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
                return (_.options.rtl === false ? 'right' : 'left');
            }
            if (_.options.verticalSwiping === true) {
                if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                    return 'down';
                } else {
                    return 'up';
                }
            }

            return 'vertical';

        };

        Slick.prototype.swipeEnd = function(event) {

            var _ = this,
                slideCount,
                direction;

            _.dragging = false;
            _.swiping = false;

            if (_.scrolling) {
                _.scrolling = false;
                return false;
            }

            _.interrupted = false;
            _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

            if ( _.touchObject.curX === undefined ) {
                return false;
            }

            if ( _.touchObject.edgeHit === true ) {
                _.$slider.trigger('edge', [_, _.swipeDirection() ]);
            }

            if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

                direction = _.swipeDirection();

                switch ( direction ) {

                    case 'left':
                    case 'down':

                        slideCount =
                            _.options.swipeToSlide ?
                                _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                                _.currentSlide + _.getSlideCount();

                        _.currentDirection = 0;

                        break;

                    case 'right':
                    case 'up':

                        slideCount =
                            _.options.swipeToSlide ?
                                _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                                _.currentSlide - _.getSlideCount();

                        _.currentDirection = 1;

                        break;

                    default:


                }

                if( direction != 'vertical' ) {

                    _.slideHandler( slideCount );
                    _.touchObject = {};
                    _.$slider.trigger('swipe', [_, direction ]);

                }

            } else {

                if ( _.touchObject.startX !== _.touchObject.curX ) {

                    _.slideHandler( _.currentSlide );
                    _.touchObject = {};

                }

            }

        };

        Slick.prototype.swipeHandler = function(event) {

            var _ = this;

            if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
                return;
            } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
                return;
            }

            _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
                event.originalEvent.touches.length : 1;

            _.touchObject.minSwipe = _.listWidth / _.options
                .touchThreshold;

            if (_.options.verticalSwiping === true) {
                _.touchObject.minSwipe = _.listHeight / _.options
                    .touchThreshold;
            }

            switch (event.data.action) {

                case 'start':
                    _.swipeStart(event);
                    break;

                case 'move':
                    _.swipeMove(event);
                    break;

                case 'end':
                    _.swipeEnd(event);
                    break;

            }

        };

        Slick.prototype.swipeMove = function(event) {

            var _ = this,
                edgeWasHit = false,
                curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

            touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

            if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
                return false;
            }

            curLeft = _.getLeft(_.currentSlide);

            _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
            _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

            verticalSwipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

            if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
                _.scrolling = true;
                return false;
            }

            if (_.options.verticalSwiping === true) {
                _.touchObject.swipeLength = verticalSwipeLength;
            }

            swipeDirection = _.swipeDirection();

            if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
                _.swiping = true;
                event.preventDefault();
            }

            positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
            if (_.options.verticalSwiping === true) {
                positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
            }


            swipeLength = _.touchObject.swipeLength;

            _.touchObject.edgeHit = false;

            if (_.options.infinite === false) {
                if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                    swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                    _.touchObject.edgeHit = true;
                }
            }

            if (_.options.vertical === false) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            } else {
                _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
            }
            if (_.options.verticalSwiping === true) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            }

            if (_.options.fade === true || _.options.touchMove === false) {
                return false;
            }

            if (_.animating === true) {
                _.swipeLeft = null;
                return false;
            }

            _.setCSS(_.swipeLeft);

        };

        Slick.prototype.swipeStart = function(event) {

            var _ = this,
                touches;

            _.interrupted = true;

            if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
                _.touchObject = {};
                return false;
            }

            if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
                touches = event.originalEvent.touches[0];
            }

            _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
            _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

            _.dragging = true;

        };

        Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

            var _ = this;

            if (_.$slidesCache !== null) {

                _.unload();

                _.$slideTrack.children(this.options.slide).detach();

                _.$slidesCache.appendTo(_.$slideTrack);

                _.reinit();

            }

        };

        Slick.prototype.unload = function() {

            var _ = this;

            $('.slick-cloned', _.$slider).remove();

            if (_.$dots) {
                _.$dots.remove();
            }

            if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }

            if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }

            _.$slides
                .removeClass('slick-slide slick-active slick-visible slick-current')
                .attr('aria-hidden', 'true')
                .css('width', '');

        };

        Slick.prototype.unslick = function(fromBreakpoint) {

            var _ = this;
            _.$slider.trigger('unslick', [_, fromBreakpoint]);
            _.destroy();

        };

        Slick.prototype.updateArrows = function() {

            var _ = this,
                centerOffset;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if ( _.options.arrows === true &&
                _.slideCount > _.options.slidesToShow &&
                !_.options.infinite ) {

                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                if (_.currentSlide === 0) {

                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                }

            }

        };

        Slick.prototype.updateDots = function() {

            var _ = this;

            if (_.$dots !== null) {

                _.$dots
                    .find('li')
                    .removeClass('slick-active')
                    .end();

                _.$dots
                    .find('li')
                    .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                    .addClass('slick-active');

            }

        };

        Slick.prototype.visibility = function() {

            var _ = this;

            if ( _.options.autoplay ) {

                if ( document[_.hidden] ) {

                    _.interrupted = true;

                } else {

                    _.interrupted = false;

                }

            }

        };

        $.fn.slick = function() {
            var _ = this,
                opt = arguments[0],
                args = Array.prototype.slice.call(arguments, 1),
                l = _.length,
                i,
                ret;
            for (i = 0; i < l; i++) {
                if (typeof opt == 'object' || typeof opt == 'undefined')
                    _[i].slick = new Slick(_[i], opt);
                else
                    ret = _[i].slick[opt].apply(_[i].slick, args);
                if (typeof ret != 'undefined') return ret;
            }
            return _;
        };

    }));




</script>





<!-- menu js-->
<script>

    (function(factory) {
        if (typeof define === 'function' && define.amd) {
            // AMD
            define(['jquery'], factory);
        } else if (typeof module === 'object' && typeof module.exports === 'object') {
            // CommonJS
            module.exports = factory(require('jquery'));
        } else {
            // Global jQuery
            factory(jQuery);
        }
    } (function($) {

        var menuTrees = [],
            mouse = false, // optimize for touch by default - we will detect for mouse input
            touchEvents = 'ontouchstart' in window, // we use this just to choose between toucn and pointer events, not for touch screen detection
            mouseDetectionEnabled = false,
            requestAnimationFrame = window.requestAnimationFrame || function(callback) { return setTimeout(callback, 1000 / 60); },
            cancelAnimationFrame = window.cancelAnimationFrame || function(id) { clearTimeout(id); },
            canAnimate = !!$.fn.animate;

        // Handle detection for mouse input (i.e. desktop browsers, tablets with a mouse, etc.)
        function initMouseDetection(disable) {
            var eNS = '.smartmenus_mouse';
            if (!mouseDetectionEnabled && !disable) {
                // if we get two consecutive mousemoves within 2 pixels from each other and within 300ms, we assume a real mouse/cursor is present
                // in practice, this seems like impossible to trick unintentianally with a real mouse and a pretty safe detection on touch devices (even with older browsers that do not support touch events)
                var firstTime = true,
                    lastMove = null,
                    events = {
                        'mousemove': function(e) {
                            var thisMove = { x: e.pageX, y: e.pageY, timeStamp: new Date().getTime() };
                            if (lastMove) {
                                var deltaX = Math.abs(lastMove.x - thisMove.x),
                                    deltaY = Math.abs(lastMove.y - thisMove.y);
                                if ((deltaX > 0 || deltaY > 0) && deltaX <= 2 && deltaY <= 2 && thisMove.timeStamp - lastMove.timeStamp <= 300) {
                                    mouse = true;
                                    // if this is the first check after page load, check if we are not over some item by chance and call the mouseenter handler if yes
                                    if (firstTime) {
                                        var $a = $(e.target).closest('a');
                                        if ($a.is('a')) {
                                            $.each(menuTrees, function() {
                                                if ($.contains(this.$root[0], $a[0])) {
                                                    this.itemEnter({ currentTarget: $a[0] });
                                                    return false;
                                                }
                                            });
                                        }
                                        firstTime = false;
                                    }
                                }
                            }
                            lastMove = thisMove;
                        }
                    };
                events[touchEvents ? 'touchstart' : 'pointerover pointermove pointerout MSPointerOver MSPointerMove MSPointerOut'] = function(e) {
                    if (isTouchEvent(e.originalEvent)) {
                        mouse = false;
                    }
                };
                $(document).on(getEventsNS(events, eNS));
                mouseDetectionEnabled = true;
            } else if (mouseDetectionEnabled && disable) {
                $(document).off(eNS);
                mouseDetectionEnabled = false;
            }
        }

        function isTouchEvent(e) {
            return !/^(4|mouse)$/.test(e.pointerType);
        }

        // returns a jQuery on() ready object
        function getEventsNS(events, eNS) {
            if (!eNS) {
                eNS = '';
            }
            var eventsNS = {};
            for (var i in events) {
                eventsNS[i.split(' ').join(eNS + ' ') + eNS] = events[i];
            }
            return eventsNS;
        }

        $.SmartMenus = function(elm, options) {
            this.$root = $(elm);
            this.opts = options;
            this.rootId = ''; // internal
            this.accessIdPrefix = '';
            this.$subArrow = null;
            this.activatedItems = []; // stores last activated A's for each level
            this.visibleSubMenus = []; // stores visible sub menus UL's (might be in no particular order)
            this.showTimeout = 0;
            this.hideTimeout = 0;
            this.scrollTimeout = 0;
            this.clickActivated = false;
            this.focusActivated = false;
            this.zIndexInc = 0;
            this.idInc = 0;
            this.$firstLink = null; // we'll use these for some tests
            this.$firstSub = null; // at runtime so we'll cache them
            this.disabled = false;
            this.$disableOverlay = null;
            this.$touchScrollingSub = null;
            this.cssTransforms3d = 'perspective' in elm.style || 'webkitPerspective' in elm.style;
            this.wasCollapsible = false;
            this.init();
        };

        $.extend($.SmartMenus, {
            hideAll: function() {
                $.each(menuTrees, function() {
                    this.menuHideAll();
                });
            },
            destroy: function() {
                while (menuTrees.length) {
                    menuTrees[0].destroy();
                }
                initMouseDetection(true);
            },
            prototype: {
                init: function(refresh) {
                    var self = this;

                    if (!refresh) {
                        menuTrees.push(this);

                        this.rootId = (new Date().getTime() + Math.random() + '').replace(/\D/g, '');
                        this.accessIdPrefix = 'sm-' + this.rootId + '-';

                        if (this.$root.hasClass('sm-rtl')) {
                            this.opts.rightToLeftSubMenus = true;
                        }

                        // init root (main menu)
                        var eNS = '.smartmenus';
                        this.$root
                            .data('smartmenus', this)
                            .attr('data-smartmenus-id', this.rootId)
                            .dataSM('level', 1)
                            .on(getEventsNS({
                                'mouseover focusin': $.proxy(this.rootOver, this),
                                'mouseout focusout': $.proxy(this.rootOut, this),
                                'keydown': $.proxy(this.rootKeyDown, this)
                            }, eNS))
                            .on(getEventsNS({
                                'mouseenter': $.proxy(this.itemEnter, this),
                                'mouseleave': $.proxy(this.itemLeave, this),
                                'mousedown': $.proxy(this.itemDown, this),
                                'focus': $.proxy(this.itemFocus, this),
                                'blur': $.proxy(this.itemBlur, this),
                                'click': $.proxy(this.itemClick, this)
                            }, eNS), 'a');

                        // hide menus on tap or click outside the root UL
                        eNS += this.rootId;
                        if (this.opts.hideOnClick) {
                            $(document).on(getEventsNS({
                                'touchstart': $.proxy(this.docTouchStart, this),
                                'touchmove': $.proxy(this.docTouchMove, this),
                                'touchend': $.proxy(this.docTouchEnd, this),
                                // for Opera Mobile < 11.5, webOS browser, etc. we'll check click too
                                'click': $.proxy(this.docClick, this)
                            }, eNS));
                        }
                        // hide sub menus on resize
                        $(window).on(getEventsNS({ 'resize orientationchange': $.proxy(this.winResize, this) }, eNS));

                        if (this.opts.subIndicators) {
                            this.$subArrow = $('<span/>').addClass('sub-arrow');
                            if (this.opts.subIndicatorsText) {
                                this.$subArrow.html(this.opts.subIndicatorsText);
                            }
                        }

                        // make sure mouse detection is enabled
                        initMouseDetection();
                    }

                    // init sub menus
                    this.$firstSub = this.$root.find('ul').each(function() { self.menuInit($(this)); }).eq(0);

                    this.$firstLink = this.$root.find('a').eq(0);

                    // find current item
                    if (this.opts.markCurrentItem) {
                        var reDefaultDoc = /(index|default)\.[^#\?\/]*/i,
                            reHash = /#.*/,
                            locHref = window.location.href.replace(reDefaultDoc, ''),
                            locHrefNoHash = locHref.replace(reHash, '');
                        this.$root.find('a:not(.mega-menu a)').each(function() {
                            var href = this.href.replace(reDefaultDoc, ''),
                                $this = $(this);
                            if (href == locHref || href == locHrefNoHash) {
                                $this.addClass('current');
                                if (self.opts.markCurrentTree) {
                                    $this.parentsUntil('[data-smartmenus-id]', 'ul').each(function() {
                                        $(this).dataSM('parent-a').addClass('current');
                                    });
                                }
                            }
                        });
                    }

                    // save initial state
                    this.wasCollapsible = this.isCollapsible();
                },
                destroy: function(refresh) {
                    if (!refresh) {
                        var eNS = '.smartmenus';
                        this.$root
                            .removeData('smartmenus')
                            .removeAttr('data-smartmenus-id')
                            .removeDataSM('level')
                            .off(eNS);
                        eNS += this.rootId;
                        $(document).off(eNS);
                        $(window).off(eNS);
                        if (this.opts.subIndicators) {
                            this.$subArrow = null;
                        }
                    }
                    this.menuHideAll();
                    var self = this;
                    this.$root.find('ul').each(function() {
                        var $this = $(this);
                        if ($this.dataSM('scroll-arrows')) {
                            $this.dataSM('scroll-arrows').remove();
                        }
                        if ($this.dataSM('shown-before')) {
                            if (self.opts.subMenusMinWidth || self.opts.subMenusMaxWidth) {
                                $this.css({ width: '', minWidth: '', maxWidth: '' }).removeClass('sm-nowrap');
                            }
                            if ($this.dataSM('scroll-arrows')) {
                                $this.dataSM('scroll-arrows').remove();
                            }
                            $this.css({ zIndex: '', top: '', left: '', marginLeft: '', marginTop: '', display: '' });
                        }
                        if (($this.attr('id') || '').indexOf(self.accessIdPrefix) == 0) {
                            $this.removeAttr('id');
                        }
                    })
                        .removeDataSM('in-mega')
                        .removeDataSM('shown-before')
                        .removeDataSM('scroll-arrows')
                        .removeDataSM('parent-a')
                        .removeDataSM('level')
                        .removeDataSM('beforefirstshowfired')
                        .removeAttr('role')
                        .removeAttr('aria-hidden')
                        .removeAttr('aria-labelledby')
                        .removeAttr('aria-expanded');
                    this.$root.find('a.has-submenu').each(function() {
                        var $this = $(this);
                        if ($this.attr('id').indexOf(self.accessIdPrefix) == 0) {
                            $this.removeAttr('id');
                        }
                    })
                        .removeClass('has-submenu')
                        .removeDataSM('sub')
                        .removeAttr('aria-haspopup')
                        .removeAttr('aria-controls')
                        .removeAttr('aria-expanded')
                        .closest('li').removeDataSM('sub');
                    if (this.opts.subIndicators) {
                        this.$root.find('span.sub-arrow').remove();
                    }
                    if (this.opts.markCurrentItem) {
                        this.$root.find('a.current').removeClass('current');
                    }
                    if (!refresh) {
                        this.$root = null;
                        this.$firstLink = null;
                        this.$firstSub = null;
                        if (this.$disableOverlay) {
                            this.$disableOverlay.remove();
                            this.$disableOverlay = null;
                        }
                        menuTrees.splice($.inArray(this, menuTrees), 1);
                    }
                },
                disable: function(noOverlay) {
                    if (!this.disabled) {
                        this.menuHideAll();
                        // display overlay over the menu to prevent interaction
                        if (!noOverlay && !this.opts.isPopup && this.$root.is(':visible')) {
                            var pos = this.$root.offset();
                            this.$disableOverlay = $('<div class="sm-jquery-disable-overlay"/>').css({
                                position: 'absolute',
                                top: pos.top,
                                left: pos.left,
                                width: this.$root.outerWidth(),
                                height: this.$root.outerHeight(),
                                zIndex: this.getStartZIndex(true),
                                opacity: 0
                            }).appendTo(document.body);
                        }
                        this.disabled = true;
                    }
                },
                docClick: function(e) {
                    if (this.$touchScrollingSub) {
                        this.$touchScrollingSub = null;
                        return;
                    }
                    // hide on any click outside the menu or on a menu link
                    if (this.visibleSubMenus.length && !$.contains(this.$root[0], e.target) || $(e.target).closest('a').length) {
                        this.menuHideAll();
                    }
                },
                docTouchEnd: function(e) {
                    if (!this.lastTouch) {
                        return;
                    }
                    if (this.visibleSubMenus.length && (this.lastTouch.x2 === undefined || this.lastTouch.x1 == this.lastTouch.x2) && (this.lastTouch.y2 === undefined || this.lastTouch.y1 == this.lastTouch.y2) && (!this.lastTouch.target || !$.contains(this.$root[0], this.lastTouch.target))) {
                        if (this.hideTimeout) {
                            clearTimeout(this.hideTimeout);
                            this.hideTimeout = 0;
                        }
                        // hide with a delay to prevent triggering accidental unwanted click on some page element
                        var self = this;
                        this.hideTimeout = setTimeout(function() { self.menuHideAll(); }, 350);
                    }
                    this.lastTouch = null;
                },
                docTouchMove: function(e) {
                    if (!this.lastTouch) {
                        return;
                    }
                    var touchPoint = e.originalEvent.touches[0];
                    this.lastTouch.x2 = touchPoint.pageX;
                    this.lastTouch.y2 = touchPoint.pageY;
                },
                docTouchStart: function(e) {
                    var touchPoint = e.originalEvent.touches[0];
                    this.lastTouch = { x1: touchPoint.pageX, y1: touchPoint.pageY, target: touchPoint.target };
                },
                enable: function() {
                    if (this.disabled) {
                        if (this.$disableOverlay) {
                            this.$disableOverlay.remove();
                            this.$disableOverlay = null;
                        }
                        this.disabled = false;
                    }
                },
                getClosestMenu: function(elm) {
                    var $closestMenu = $(elm).closest('ul');
                    while ($closestMenu.dataSM('in-mega')) {
                        $closestMenu = $closestMenu.parent().closest('ul');
                    }
                    return $closestMenu[0] || null;
                },
                getHeight: function($elm) {
                    return this.getOffset($elm, true);
                },
                // returns precise width/height float values
                getOffset: function($elm, height) {
                    var old;
                    if ($elm.css('display') == 'none') {
                        old = { position: $elm[0].style.position, visibility: $elm[0].style.visibility };
                        $elm.css({ position: 'absolute', visibility: 'hidden' }).show();
                    }
                    var box = $elm[0].getBoundingClientRect && $elm[0].getBoundingClientRect(),
                        val = box && (height ? box.height || box.bottom - box.top : box.width || box.right - box.left);
                    if (!val && val !== 0) {
                        val = height ? $elm[0].offsetHeight : $elm[0].offsetWidth;
                    }
                    if (old) {
                        $elm.hide().css(old);
                    }
                    return val;
                },
                getStartZIndex: function(root) {
                    var zIndex = parseInt(this[root ? '$root' : '$firstSub'].css('z-index'));
                    if (!root && isNaN(zIndex)) {
                        zIndex = parseInt(this.$root.css('z-index'));
                    }
                    return !isNaN(zIndex) ? zIndex : 1;
                },
                getTouchPoint: function(e) {
                    return e.touches && e.touches[0] || e.changedTouches && e.changedTouches[0] || e;
                },
                getViewport: function(height) {
                    var name = height ? 'Height' : 'Width',
                        val = document.documentElement['client' + name],
                        val2 = window['inner' + name];
                    if (val2) {
                        val = Math.min(val, val2);
                    }
                    return val;
                },
                getViewportHeight: function() {
                    return this.getViewport(true);
                },
                getViewportWidth: function() {
                    return this.getViewport();
                },
                getWidth: function($elm) {
                    return this.getOffset($elm);
                },
                handleEvents: function() {
                    return !this.disabled && this.isCSSOn();
                },
                handleItemEvents: function($a) {
                    return this.handleEvents() && !this.isLinkInMegaMenu($a);
                },
                isCollapsible: function() {
                    return this.$firstSub.css('position') == 'static';
                },
                isCSSOn: function() {
                    return this.$firstLink.css('display') != 'inline';
                },
                isFixed: function() {
                    var isFixed = this.$root.css('position') == 'fixed';
                    if (!isFixed) {
                        this.$root.parentsUntil('body').each(function() {
                            if ($(this).css('position') == 'fixed') {
                                isFixed = true;
                                return false;
                            }
                        });
                    }
                    return isFixed;
                },
                isLinkInMegaMenu: function($a) {
                    return $(this.getClosestMenu($a[0])).hasClass('mega-menu');
                },
                isTouchMode: function() {
                    return !mouse || this.opts.noMouseOver || this.isCollapsible();
                },
                itemActivate: function($a, hideDeeperSubs) {
                    var $ul = $a.closest('ul'),
                        level = $ul.dataSM('level');
                    // if for some reason the parent item is not activated (e.g. this is an API call to activate the item), activate all parent items first
                    if (level > 1 && (!this.activatedItems[level - 2] || this.activatedItems[level - 2][0] != $ul.dataSM('parent-a')[0])) {
                        var self = this;
                        $($ul.parentsUntil('[data-smartmenus-id]', 'ul').get().reverse()).add($ul).each(function() {
                            self.itemActivate($(this).dataSM('parent-a'));
                        });
                    }
                    // hide any visible deeper level sub menus
                    if (!this.isCollapsible() || hideDeeperSubs) {
                        this.menuHideSubMenus(!this.activatedItems[level - 1] || this.activatedItems[level - 1][0] != $a[0] ? level - 1 : level);
                    }
                    // save new active item for this level
                    this.activatedItems[level - 1] = $a;
                    if (this.$root.triggerHandler('activate.smapi', $a[0]) === false) {
                        return;
                    }
                    // show the sub menu if this item has one
                    var $sub = $a.dataSM('sub');
                    if ($sub && (this.isTouchMode() || (!this.opts.showOnClick || this.clickActivated))) {
                        this.menuShow($sub);
                    }
                },
                itemBlur: function(e) {
                    var $a = $(e.currentTarget);
                    if (!this.handleItemEvents($a)) {
                        return;
                    }
                    this.$root.triggerHandler('blur.smapi', $a[0]);
                },
                itemClick: function(e) {
                    var $a = $(e.currentTarget);
                    if (!this.handleItemEvents($a)) {
                        return;
                    }
                    if (this.$touchScrollingSub && this.$touchScrollingSub[0] == $a.closest('ul')[0]) {
                        this.$touchScrollingSub = null;
                        e.stopPropagation();
                        return false;
                    }
                    if (this.$root.triggerHandler('click.smapi', $a[0]) === false) {
                        return false;
                    }
                    var $sub = $a.dataSM('sub'),
                        firstLevelSub = $sub ? $sub.dataSM('level') == 2 : false;
                    if ($sub) {
                        var subArrowClicked = $(e.target).is('.sub-arrow'),
                            collapsible = this.isCollapsible(),
                            behaviorToggle = /toggle$/.test(this.opts.collapsibleBehavior),
                            behaviorLink = /link$/.test(this.opts.collapsibleBehavior),
                            behaviorAccordion = /^accordion/.test(this.opts.collapsibleBehavior);
                        // if the sub is hidden, try to show it
                        if (!$sub.is(':visible')) {
                            if (!behaviorLink || !collapsible || subArrowClicked) {
                                if (this.opts.showOnClick && firstLevelSub) {
                                    this.clickActivated = true;
                                }
                                // try to activate the item and show the sub
                                this.itemActivate($a, behaviorAccordion);
                                // if "itemActivate" showed the sub, prevent the click so that the link is not loaded
                                // if it couldn't show it, then the sub menus are disabled with an !important declaration (e.g. via mobile styles) so let the link get loaded
                                if ($sub.is(':visible')) {
                                    this.focusActivated = true;
                                    return false;
                                }
                            }
                            // if the sub is visible and we are in collapsible mode
                        } else if (collapsible && (behaviorToggle || subArrowClicked)) {
                            this.itemActivate($a, behaviorAccordion);
                            this.menuHide($sub);
                            if (behaviorToggle) {
                                this.focusActivated = false;
                            }
                            return false;
                        }
                    }
                    if (this.opts.showOnClick && firstLevelSub || $a.hasClass('disabled') || this.$root.triggerHandler('select.smapi', $a[0]) === false) {
                        return false;
                    }
                },
                itemDown: function(e) {
                    var $a = $(e.currentTarget);
                    if (!this.handleItemEvents($a)) {
                        return;
                    }
                    $a.dataSM('mousedown', true);
                },
                itemEnter: function(e) {
                    var $a = $(e.currentTarget);
                    if (!this.handleItemEvents($a)) {
                        return;
                    }
                    if (!this.isTouchMode()) {
                        if (this.showTimeout) {
                            clearTimeout(this.showTimeout);
                            this.showTimeout = 0;
                        }
                        var self = this;
                        this.showTimeout = setTimeout(function() { self.itemActivate($a); }, this.opts.showOnClick && $a.closest('ul').dataSM('level') == 1 ? 1 : this.opts.showTimeout);
                    }
                    this.$root.triggerHandler('mouseenter.smapi', $a[0]);
                },
                itemFocus: function(e) {
                    var $a = $(e.currentTarget);
                    if (!this.handleItemEvents($a)) {
                        return;
                    }
                    // fix (the mousedown check): in some browsers a tap/click produces consecutive focus + click events so we don't need to activate the item on focus
                    if (this.focusActivated && (!this.isTouchMode() || !$a.dataSM('mousedown')) && (!this.activatedItems.length || this.activatedItems[this.activatedItems.length - 1][0] != $a[0])) {
                        this.itemActivate($a, true);
                    }
                    this.$root.triggerHandler('focus.smapi', $a[0]);
                },
                itemLeave: function(e) {
                    var $a = $(e.currentTarget);
                    if (!this.handleItemEvents($a)) {
                        return;
                    }
                    if (!this.isTouchMode()) {
                        $a[0].blur();
                        if (this.showTimeout) {
                            clearTimeout(this.showTimeout);
                            this.showTimeout = 0;
                        }
                    }
                    $a.removeDataSM('mousedown');
                    this.$root.triggerHandler('mouseleave.smapi', $a[0]);
                },
                menuHide: function($sub) {
                    if (this.$root.triggerHandler('beforehide.smapi', $sub[0]) === false) {
                        return;
                    }
                    if (canAnimate) {
                        $sub.stop(true, true);
                    }
                    if ($sub.css('display') != 'none') {
                        var complete = function() {
                            // unset z-index
                            $sub.css('z-index', '');
                        };
                        // if sub is collapsible (mobile view)
                        if (this.isCollapsible()) {
                            if (canAnimate && this.opts.collapsibleHideFunction) {
                                this.opts.collapsibleHideFunction.call(this, $sub, complete);
                            } else {
                                $sub.hide(this.opts.collapsibleHideDuration, complete);
                            }
                        } else {
                            if (canAnimate && this.opts.hideFunction) {
                                this.opts.hideFunction.call(this, $sub, complete);
                            } else {
                                $sub.hide(this.opts.hideDuration, complete);
                            }
                        }
                        // deactivate scrolling if it is activated for this sub
                        if ($sub.dataSM('scroll')) {
                            this.menuScrollStop($sub);
                            $sub.css({ 'touch-action': '', '-ms-touch-action': '', '-webkit-transform': '', transform: '' })
                                .off('.smartmenus_scroll').removeDataSM('scroll').dataSM('scroll-arrows').hide();
                        }
                        // unhighlight parent item + accessibility
                        $sub.dataSM('parent-a').removeClass('highlighted').attr('aria-expanded', 'false');
                        $sub.attr({
                            'aria-expanded': 'false',
                            'aria-hidden': 'true'
                        });
                        var level = $sub.dataSM('level');
                        this.activatedItems.splice(level - 1, 1);
                        this.visibleSubMenus.splice($.inArray($sub, this.visibleSubMenus), 1);
                        this.$root.triggerHandler('hide.smapi', $sub[0]);
                    }
                },
                menuHideAll: function() {
                    if (this.showTimeout) {
                        clearTimeout(this.showTimeout);
                        this.showTimeout = 0;
                    }
                    // hide all subs
                    // if it's a popup, this.visibleSubMenus[0] is the root UL
                    var level = this.opts.isPopup ? 1 : 0;
                    for (var i = this.visibleSubMenus.length - 1; i >= level; i--) {
                        this.menuHide(this.visibleSubMenus[i]);
                    }
                    // hide root if it's popup
                    if (this.opts.isPopup) {
                        if (canAnimate) {
                            this.$root.stop(true, true);
                        }
                        if (this.$root.is(':visible')) {
                            if (canAnimate && this.opts.hideFunction) {
                                this.opts.hideFunction.call(this, this.$root);
                            } else {
                                this.$root.hide(this.opts.hideDuration);
                            }
                        }
                    }
                    this.activatedItems = [];
                    this.visibleSubMenus = [];
                    this.clickActivated = false;
                    this.focusActivated = false;
                    // reset z-index increment
                    this.zIndexInc = 0;
                    this.$root.triggerHandler('hideAll.smapi');
                },
                menuHideSubMenus: function(level) {
                    for (var i = this.activatedItems.length - 1; i >= level; i--) {
                        var $sub = this.activatedItems[i].dataSM('sub');
                        if ($sub) {
                            this.menuHide($sub);
                        }
                    }
                },
                menuInit: function($ul) {
                    if (!$ul.dataSM('in-mega')) {
                        // mark UL's in mega drop downs (if any) so we can neglect them
                        if ($ul.hasClass('mega-menu')) {
                            $ul.find('ul').dataSM('in-mega', true);
                        }
                        // get level (much faster than, for example, using parentsUntil)
                        var level = 2,
                            par = $ul[0];
                        while ((par = par.parentNode.parentNode) != this.$root[0]) {
                            level++;
                        }
                        // cache stuff for quick access
                        var $a = $ul.prevAll('a').eq(-1);
                        // if the link is nested (e.g. in a heading)
                        if (!$a.length) {
                            $a = $ul.prevAll().find('a').eq(-1);
                        }
                        $a.addClass('has-submenu').dataSM('sub', $ul);
                        $ul.dataSM('parent-a', $a)
                            .dataSM('level', level)
                            .parent().dataSM('sub', $ul);
                        // accessibility
                        var aId = $a.attr('id') || this.accessIdPrefix + (++this.idInc),
                            ulId = $ul.attr('id') || this.accessIdPrefix + (++this.idInc);
                        $a.attr({
                            id: aId,
                            'aria-haspopup': 'true',
                            'aria-controls': ulId,
                            'aria-expanded': 'false'
                        });
                        $ul.attr({
                            id: ulId,
                            'role': 'group',
                            'aria-hidden': 'true',
                            'aria-labelledby': aId,
                            'aria-expanded': 'false'
                        });
                        // add sub indicator to parent item
                        if (this.opts.subIndicators) {
                            $a[this.opts.subIndicatorsPos](this.$subArrow.clone());
                        }
                    }
                },
                menuPosition: function($sub) {
                    var $a = $sub.dataSM('parent-a'),
                        $li = $a.closest('li'),
                        $ul = $li.parent(),
                        level = $sub.dataSM('level'),
                        subW = this.getWidth($sub),
                        subH = this.getHeight($sub),
                        itemOffset = $a.offset(),
                        itemX = itemOffset.left,
                        itemY = itemOffset.top,
                        itemW = this.getWidth($a),
                        itemH = this.getHeight($a),
                        $win = $(window),
                        winX = $win.scrollLeft(),
                        winY = $win.scrollTop(),
                        winW = this.getViewportWidth(),
                        winH = this.getViewportHeight(),
                        horizontalParent = $ul.parent().is('[data-sm-horizontal-sub]') || level == 2 && !$ul.hasClass('sm-vertical'),
                        rightToLeft = this.opts.rightToLeftSubMenus && !$li.is('[data-sm-reverse]') || !this.opts.rightToLeftSubMenus && $li.is('[data-sm-reverse]'),
                        subOffsetX = level == 2 ? this.opts.mainMenuSubOffsetX : this.opts.subMenusSubOffsetX,
                        subOffsetY = level == 2 ? this.opts.mainMenuSubOffsetY : this.opts.subMenusSubOffsetY,
                        x, y;
                    if (horizontalParent) {
                        x = rightToLeft ? itemW - subW - subOffsetX : subOffsetX;
                        y = this.opts.bottomToTopSubMenus ? -subH - subOffsetY : itemH + subOffsetY;
                    } else {
                        x = rightToLeft ? subOffsetX - subW : itemW - subOffsetX;
                        y = this.opts.bottomToTopSubMenus ? itemH - subOffsetY - subH : subOffsetY;
                    }
                    if (this.opts.keepInViewport) {
                        var absX = itemX + x,
                            absY = itemY + y;
                        if (rightToLeft && absX < winX) {
                            x = horizontalParent ? winX - absX + x : itemW - subOffsetX;
                        } else if (!rightToLeft && absX + subW > winX + winW) {
                            x = horizontalParent ? winX + winW - subW - absX + x : subOffsetX - subW;
                        }
                        if (!horizontalParent) {
                            if (subH < winH && absY + subH > winY + winH) {
                                y += winY + winH - subH - absY;
                            } else if (subH >= winH || absY < winY) {
                                y += winY - absY;
                            }
                        }
                        // do we need scrolling?
                        // 0.49 used for better precision when dealing with float values
                        if (horizontalParent && (absY + subH > winY + winH + 0.49 || absY < winY) || !horizontalParent && subH > winH + 0.49) {
                            var self = this;
                            if (!$sub.dataSM('scroll-arrows')) {
                                $sub.dataSM('scroll-arrows', $([$('<span class="scroll-up"><span class="scroll-up-arrow"></span></span>')[0], $('<span class="scroll-down"><span class="scroll-down-arrow"></span></span>')[0]])
                                    .on({
                                        mouseenter: function() {
                                            $sub.dataSM('scroll').up = $(this).hasClass('scroll-up');
                                            self.menuScroll($sub);
                                        },
                                        mouseleave: function(e) {
                                            self.menuScrollStop($sub);
                                            self.menuScrollOut($sub, e);
                                        },
                                        'mousewheel DOMMouseScroll': function(e) { e.preventDefault(); }
                                    })
                                    .insertAfter($sub)
                                );
                            }
                            // bind scroll events and save scroll data for this sub
                            var eNS = '.smartmenus_scroll';
                            $sub.dataSM('scroll', {
                                y: this.cssTransforms3d ? 0 : y - itemH,
                                step: 1,
                                // cache stuff for faster recalcs later
                                itemH: itemH,
                                subH: subH,
                                arrowDownH: this.getHeight($sub.dataSM('scroll-arrows').eq(1))
                            })
                                .on(getEventsNS({
                                    'mouseover': function(e) { self.menuScrollOver($sub, e); },
                                    'mouseout': function(e) { self.menuScrollOut($sub, e); },
                                    'mousewheel DOMMouseScroll': function(e) { self.menuScrollMousewheel($sub, e); }
                                }, eNS))
                                .dataSM('scroll-arrows').css({ top: 'auto', left: '0', marginLeft: x + (parseInt($sub.css('border-left-width')) || 0), width: subW - (parseInt($sub.css('border-left-width')) || 0) - (parseInt($sub.css('border-right-width')) || 0), zIndex: $sub.css('z-index') })
                                .eq(horizontalParent && this.opts.bottomToTopSubMenus ? 0 : 1).show();
                            // when a menu tree is fixed positioned we allow scrolling via touch too
                            // since there is no other way to access such long sub menus if no mouse is present
                            if (this.isFixed()) {
                                var events = {};
                                events[touchEvents ? 'touchstart touchmove touchend' : 'pointerdown pointermove pointerup MSPointerDown MSPointerMove MSPointerUp'] = function(e) {
                                    self.menuScrollTouch($sub, e);
                                };
                                $sub.css({ 'touch-action': 'none', '-ms-touch-action': 'none' }).on(getEventsNS(events, eNS));
                            }
                        }
                    }
                    $sub.css({ top: 'auto', left: '0', marginLeft: x, marginTop: y - itemH });
                },
                menuScroll: function($sub, once, step) {
                    var data = $sub.dataSM('scroll'),
                        $arrows = $sub.dataSM('scroll-arrows'),
                        end = data.up ? data.upEnd : data.downEnd,
                        diff;
                    if (!once && data.momentum) {
                        data.momentum *= 0.92;
                        diff = data.momentum;
                        if (diff < 0.5) {
                            this.menuScrollStop($sub);
                            return;
                        }
                    } else {
                        diff = step || (once || !this.opts.scrollAccelerate ? this.opts.scrollStep : Math.floor(data.step));
                    }
                    // hide any visible deeper level sub menus
                    var level = $sub.dataSM('level');
                    if (this.activatedItems[level - 1] && this.activatedItems[level - 1].dataSM('sub') && this.activatedItems[level - 1].dataSM('sub').is(':visible')) {
                        this.menuHideSubMenus(level - 1);
                    }
                    data.y = data.up && end <= data.y || !data.up && end >= data.y ? data.y : (Math.abs(end - data.y) > diff ? data.y + (data.up ? diff : -diff) : end);
                    $sub.css(this.cssTransforms3d ? { '-webkit-transform': 'translate3d(0, ' + data.y + 'px, 0)', transform: 'translate3d(0, ' + data.y + 'px, 0)' } : { marginTop: data.y });
                    // show opposite arrow if appropriate
                    if (mouse && (data.up && data.y > data.downEnd || !data.up && data.y < data.upEnd)) {
                        $arrows.eq(data.up ? 1 : 0).show();
                    }
                    // if we've reached the end
                    if (data.y == end) {
                        if (mouse) {
                            $arrows.eq(data.up ? 0 : 1).hide();
                        }
                        this.menuScrollStop($sub);
                    } else if (!once) {
                        if (this.opts.scrollAccelerate && data.step < this.opts.scrollStep) {
                            data.step += 0.2;
                        }
                        var self = this;
                        this.scrollTimeout = requestAnimationFrame(function() { self.menuScroll($sub); });
                    }
                },
                menuScrollMousewheel: function($sub, e) {
                    if (this.getClosestMenu(e.target) == $sub[0]) {
                        e = e.originalEvent;
                        var up = (e.wheelDelta || -e.detail) > 0;
                        if ($sub.dataSM('scroll-arrows').eq(up ? 0 : 1).is(':visible')) {
                            $sub.dataSM('scroll').up = up;
                            this.menuScroll($sub, true);
                        }
                    }
                    e.preventDefault();
                },
                menuScrollOut: function($sub, e) {
                    if (mouse) {
                        if (!/^scroll-(up|down)/.test((e.relatedTarget || '').className) && ($sub[0] != e.relatedTarget && !$.contains($sub[0], e.relatedTarget) || this.getClosestMenu(e.relatedTarget) != $sub[0])) {
                            $sub.dataSM('scroll-arrows').css('visibility', 'hidden');
                        }
                    }
                },
                menuScrollOver: function($sub, e) {
                    if (mouse) {
                        if (!/^scroll-(up|down)/.test(e.target.className) && this.getClosestMenu(e.target) == $sub[0]) {
                            this.menuScrollRefreshData($sub);
                            var data = $sub.dataSM('scroll'),
                                upEnd = $(window).scrollTop() - $sub.dataSM('parent-a').offset().top - data.itemH;
                            $sub.dataSM('scroll-arrows').eq(0).css('margin-top', upEnd).end()
                                .eq(1).css('margin-top', upEnd + this.getViewportHeight() - data.arrowDownH).end()
                                .css('visibility', 'visible');
                        }
                    }
                },
                menuScrollRefreshData: function($sub) {
                    var data = $sub.dataSM('scroll'),
                        upEnd = $(window).scrollTop() - $sub.dataSM('parent-a').offset().top - data.itemH;
                    if (this.cssTransforms3d) {
                        upEnd = -(parseFloat($sub.css('margin-top')) - upEnd);
                    }
                    $.extend(data, {
                        upEnd: upEnd,
                        downEnd: upEnd + this.getViewportHeight() - data.subH
                    });
                },
                menuScrollStop: function($sub) {
                    if (this.scrollTimeout) {
                        cancelAnimationFrame(this.scrollTimeout);
                        this.scrollTimeout = 0;
                        $sub.dataSM('scroll').step = 1;
                        return true;
                    }
                },
                menuScrollTouch: function($sub, e) {
                    e = e.originalEvent;
                    if (isTouchEvent(e)) {
                        var touchPoint = this.getTouchPoint(e);
                        // neglect event if we touched a visible deeper level sub menu
                        if (this.getClosestMenu(touchPoint.target) == $sub[0]) {
                            var data = $sub.dataSM('scroll');
                            if (/(start|down)$/i.test(e.type)) {
                                if (this.menuScrollStop($sub)) {
                                    // if we were scrolling, just stop and don't activate any link on the first touch
                                    e.preventDefault();
                                    this.$touchScrollingSub = $sub;
                                } else {
                                    this.$touchScrollingSub = null;
                                }
                                // update scroll data since the user might have zoomed, etc.
                                this.menuScrollRefreshData($sub);
                                // extend it with the touch properties
                                $.extend(data, {
                                    touchStartY: touchPoint.pageY,
                                    touchStartTime: e.timeStamp
                                });
                            } else if (/move$/i.test(e.type)) {
                                var prevY = data.touchY !== undefined ? data.touchY : data.touchStartY;
                                if (prevY !== undefined && prevY != touchPoint.pageY) {
                                    this.$touchScrollingSub = $sub;
                                    var up = prevY < touchPoint.pageY;
                                    // changed direction? reset...
                                    if (data.up !== undefined && data.up != up) {
                                        $.extend(data, {
                                            touchStartY: touchPoint.pageY,
                                            touchStartTime: e.timeStamp
                                        });
                                    }
                                    $.extend(data, {
                                        up: up,
                                        touchY: touchPoint.pageY
                                    });
                                    this.menuScroll($sub, true, Math.abs(touchPoint.pageY - prevY));
                                }
                                e.preventDefault();
                            } else { // touchend/pointerup
                                if (data.touchY !== undefined) {
                                    if (data.momentum = Math.pow(Math.abs(touchPoint.pageY - data.touchStartY) / (e.timeStamp - data.touchStartTime), 2) * 15) {
                                        this.menuScrollStop($sub);
                                        this.menuScroll($sub);
                                        e.preventDefault();
                                    }
                                    delete data.touchY;
                                }
                            }
                        }
                    }
                },
                menuShow: function($sub) {
                    if (!$sub.dataSM('beforefirstshowfired')) {
                        $sub.dataSM('beforefirstshowfired', true);
                        if (this.$root.triggerHandler('beforefirstshow.smapi', $sub[0]) === false) {
                            return;
                        }
                    }
                    if (this.$root.triggerHandler('beforeshow.smapi', $sub[0]) === false) {
                        return;
                    }
                    $sub.dataSM('shown-before', true);
                    if (canAnimate) {
                        $sub.stop(true, true);
                    }
                    if (!$sub.is(':visible')) {
                        // highlight parent item
                        var $a = $sub.dataSM('parent-a'),
                            collapsible = this.isCollapsible();
                        if (this.opts.keepHighlighted || collapsible) {
                            $a.addClass('highlighted');
                        }
                        if (collapsible) {
                            $sub.removeClass('sm-nowrap').css({ zIndex: '', width: 'auto', minWidth: '', maxWidth: '', top: '', left: '', marginLeft: '', marginTop: '' });
                        } else {
                            // set z-index
                            $sub.css('z-index', this.zIndexInc = (this.zIndexInc || this.getStartZIndex()) + 1);
                            // min/max-width fix - no way to rely purely on CSS as all UL's are nested
                            if (this.opts.subMenusMinWidth || this.opts.subMenusMaxWidth) {
                                $sub.css({ width: 'auto', minWidth: '', maxWidth: '' }).addClass('sm-nowrap');
                                if (this.opts.subMenusMinWidth) {
                                    $sub.css('min-width', this.opts.subMenusMinWidth);
                                }
                                if (this.opts.subMenusMaxWidth) {
                                    var noMaxWidth = this.getWidth($sub);
                                    $sub.css('max-width', this.opts.subMenusMaxWidth);
                                    if (noMaxWidth > this.getWidth($sub)) {
                                        $sub.removeClass('sm-nowrap').css('width', this.opts.subMenusMaxWidth);
                                    }
                                }
                            }
                            this.menuPosition($sub);
                        }
                        var complete = function() {
                            // fix: "overflow: hidden;" is not reset on animation complete in jQuery < 1.9.0 in Chrome when global "box-sizing: border-box;" is used
                            $sub.css('overflow', '');
                        };
                        // if sub is collapsible (mobile view)
                        if (collapsible) {
                            if (canAnimate && this.opts.collapsibleShowFunction) {
                                this.opts.collapsibleShowFunction.call(this, $sub, complete);
                            } else {
                                $sub.show(this.opts.collapsibleShowDuration, complete);
                            }
                        } else {
                            if (canAnimate && this.opts.showFunction) {
                                this.opts.showFunction.call(this, $sub, complete);
                            } else {
                                $sub.show(this.opts.showDuration, complete);
                            }
                        }
                        // accessibility
                        $a.attr('aria-expanded', 'true');
                        $sub.attr({
                            'aria-expanded': 'true',
                            'aria-hidden': 'false'
                        });
                        // store sub menu in visible array
                        this.visibleSubMenus.push($sub);
                        this.$root.triggerHandler('show.smapi', $sub[0]);
                    }
                },
                popupHide: function(noHideTimeout) {
                    if (this.hideTimeout) {
                        clearTimeout(this.hideTimeout);
                        this.hideTimeout = 0;
                    }
                    var self = this;
                    this.hideTimeout = setTimeout(function() {
                        self.menuHideAll();
                    }, noHideTimeout ? 1 : this.opts.hideTimeout);
                },
                popupShow: function(left, top) {
                    if (!this.opts.isPopup) {
                        alert('SmartMenus jQuery Error:\n\nIf you want to show this menu via the "popupShow" method, set the isPopup:true option.');
                        return;
                    }
                    if (this.hideTimeout) {
                        clearTimeout(this.hideTimeout);
                        this.hideTimeout = 0;
                    }
                    this.$root.dataSM('shown-before', true);
                    if (canAnimate) {
                        this.$root.stop(true, true);
                    }
                    if (!this.$root.is(':visible')) {
                        this.$root.css({ left: left, top: top });
                        // show menu
                        var self = this,
                            complete = function() {
                                self.$root.css('overflow', '');
                            };
                        if (canAnimate && this.opts.showFunction) {
                            this.opts.showFunction.call(this, this.$root, complete);
                        } else {
                            this.$root.show(this.opts.showDuration, complete);
                        }
                        this.visibleSubMenus[0] = this.$root;
                    }
                },
                refresh: function() {
                    this.destroy(true);
                    this.init(true);
                },
                rootKeyDown: function(e) {
                    if (!this.handleEvents()) {
                        return;
                    }
                    switch (e.keyCode) {
                        case 27: // reset on Esc
                            var $activeTopItem = this.activatedItems[0];
                            if ($activeTopItem) {
                                this.menuHideAll();
                                $activeTopItem[0].focus();
                                var $sub = $activeTopItem.dataSM('sub');
                                if ($sub) {
                                    this.menuHide($sub);
                                }
                            }
                            break;
                        case 32: // activate item's sub on Space
                            var $target = $(e.target);
                            if ($target.is('a') && this.handleItemEvents($target)) {
                                var $sub = $target.dataSM('sub');
                                if ($sub && !$sub.is(':visible')) {
                                    this.itemClick({ currentTarget: e.target });
                                    e.preventDefault();
                                }
                            }
                            break;
                    }
                },
                rootOut: function(e) {
                    if (!this.handleEvents() || this.isTouchMode() || e.target == this.$root[0]) {
                        return;
                    }
                    if (this.hideTimeout) {
                        clearTimeout(this.hideTimeout);
                        this.hideTimeout = 0;
                    }
                    if (!this.opts.showOnClick || !this.opts.hideOnClick) {
                        var self = this;
                        this.hideTimeout = setTimeout(function() { self.menuHideAll(); }, this.opts.hideTimeout);
                    }
                },
                rootOver: function(e) {
                    if (!this.handleEvents() || this.isTouchMode() || e.target == this.$root[0]) {
                        return;
                    }
                    if (this.hideTimeout) {
                        clearTimeout(this.hideTimeout);
                        this.hideTimeout = 0;
                    }
                },
                winResize: function(e) {
                    if (!this.handleEvents()) {
                        // we still need to resize the disable overlay if it's visible
                        if (this.$disableOverlay) {
                            var pos = this.$root.offset();
                            this.$disableOverlay.css({
                                top: pos.top,
                                left: pos.left,
                                width: this.$root.outerWidth(),
                                height: this.$root.outerHeight()
                            });
                        }
                        return;
                    }
                    // hide sub menus on resize - on mobile do it only on orientation change
                    if (!('onorientationchange' in window) || e.type == 'orientationchange') {
                        var collapsible = this.isCollapsible();
                        // if it was collapsible before resize and still is, don't do it
                        if (!(this.wasCollapsible && collapsible)) {
                            if (this.activatedItems.length) {
                                this.activatedItems[this.activatedItems.length - 1][0].blur();
                            }
                            this.menuHideAll();
                        }
                        this.wasCollapsible = collapsible;
                    }
                }
            }
        });

        $.fn.dataSM = function(key, val) {
            if (val) {
                return this.data(key + '_smartmenus', val);
            }
            return this.data(key + '_smartmenus');
        };

        $.fn.removeDataSM = function(key) {
            return this.removeData(key + '_smartmenus');
        };

        $.fn.smartmenus = function(options) {
            if (typeof options == 'string') {
                var args = arguments,
                    method = options;
                Array.prototype.shift.call(args);
                return this.each(function() {
                    var smartmenus = $(this).data('smartmenus');
                    if (smartmenus && smartmenus[method]) {
                        smartmenus[method].apply(smartmenus, args);
                    }
                });
            }
            return this.each(function() {
                // [data-sm-options] attribute on the root UL
                var dataOpts = $(this).data('sm-options') || null;
                if (dataOpts) {
                    try {
                        dataOpts = eval('(' + dataOpts + ')');
                    } catch(e) {
                        dataOpts = null;
                        alert('ERROR\n\nSmartMenus jQuery init:\nInvalid "data-sm-options" attribute value syntax.');
                    };
                }
                new $.SmartMenus(this, $.extend({}, $.fn.smartmenus.defaults, options, dataOpts));
            });
        };

        // default settings
        $.fn.smartmenus.defaults = {
            isPopup:    false,    // is this a popup menu (can be shown via the popupShow/popupHide methods) or a permanent menu bar
            mainMenuSubOffsetX: 0,    // pixels offset from default position
            mainMenuSubOffsetY: 0,    // pixels offset from default position
            subMenusSubOffsetX: 0,    // pixels offset from default position
            subMenusSubOffsetY: 0,    // pixels offset from default position
            subMenusMinWidth: '10em',   // min-width for the sub menus (any CSS unit) - if set, the fixed width set in CSS will be ignored
            subMenusMaxWidth: '20em',   // max-width for the sub menus (any CSS unit) - if set, the fixed width set in CSS will be ignored
            subIndicators:    true,   // create sub menu indicators - creates a SPAN and inserts it in the A
            subIndicatorsPos:   'append', // position of the SPAN relative to the menu item content ('append', 'prepend')
            subIndicatorsText:  '',   // [optionally] add text in the SPAN (e.g. '+') (you may want to check the CSS for the sub indicators too)
            scrollStep:     30,   // pixels step when scrolling long sub menus that do not fit in the viewport height
            scrollAccelerate: true,   // accelerate scrolling or use a fixed step
            showTimeout:    250,    // timeout before showing the sub menus
            hideTimeout:    500,    // timeout before hiding the sub menus
            showDuration:   0,    // duration for show animation - set to 0 for no animation - matters only if showFunction:null
            showFunction:   null,   // custom function to use when showing a sub menu (the default is the jQuery 'show')
            // don't forget to call complete() at the end of whatever you do
            // e.g.: function($ul, complete) { $ul.fadeIn(250, complete); }
            hideDuration:   0,    // duration for hide animation - set to 0 for no animation - matters only if hideFunction:null
            hideFunction:   function($ul, complete) { $ul.fadeOut(200, complete); },  // custom function to use when hiding a sub menu (the default is the jQuery 'hide')
            // don't forget to call complete() at the end of whatever you do
            // e.g.: function($ul, complete) { $ul.fadeOut(250, complete); }
            collapsibleShowDuration:0,    // duration for show animation for collapsible sub menus - matters only if collapsibleShowFunction:null
            collapsibleShowFunction:function($ul, complete) { $ul.slideDown(200, complete); },  // custom function to use when showing a collapsible sub menu
            // (i.e. when mobile styles are used to make the sub menus collapsible)
            collapsibleHideDuration:0,    // duration for hide animation for collapsible sub menus - matters only if collapsibleHideFunction:null
            collapsibleHideFunction:function($ul, complete) { $ul.slideUp(200, complete); },  // custom function to use when hiding a collapsible sub menu
            // (i.e. when mobile styles are used to make the sub menus collapsible)
            showOnClick:    false,    // show the first-level sub menus onclick instead of onmouseover (i.e. mimic desktop app menus) (matters only for mouse input)
            hideOnClick:    true,   // hide the sub menus on click/tap anywhere on the page
            noMouseOver:    false,    // disable sub menus activation onmouseover (i.e. behave like in touch mode - use just mouse clicks) (matters only for mouse input)
            keepInViewport:   true,   // reposition the sub menus if needed to make sure they always appear inside the viewport
            keepHighlighted:  true,   // keep all ancestor items of the current sub menu highlighted (adds the 'highlighted' class to the A's)
            markCurrentItem:  false,    // automatically add the 'current' class to the A element of the item linking to the current URL
            markCurrentTree:  true,   // add the 'current' class also to the A elements of all ancestor items of the current item
            rightToLeftSubMenus:  false,    // right to left display of the sub menus (check the CSS for the sub indicators' position)
            bottomToTopSubMenus:  false,    // bottom to top display of the sub menus
            collapsibleBehavior:  'default' // parent items behavior in collapsible (mobile) view ('default', 'toggle', 'link', 'accordion', 'accordion-toggle', 'accordion-link')
            // 'default' - first tap on parent item expands sub, second tap loads its link
            // 'toggle' - the whole parent item acts just as a toggle button for its sub menu (expands/collapses on each tap)
            // 'link' - the parent item acts as a regular item (first tap loads its link), the sub menu can be expanded only via the +/- button
            // 'accordion' - like 'default' but on expand also resets any visible sub menus from deeper levels or other branches
            // 'accordion-toggle' - like 'toggle' but on expand also resets any visible sub menus from deeper levels or other branches
            // 'accordion-link' - like 'link' but on expand also resets any visible sub menus from deeper levels or other branches
        };

        return $;
    }));


</script>





<!-- Theme scriptjs-->
<script type="text/javascript">
    /*-----------------------------------------------------------------------------------
 Template Name:Bigdeal
 Template URI: themes.pixelstrap.com/bigdeal
 Description: This is E-commerce website
 Author: Pixelstrap
 Author URI: https://themeforest.net/user/pixelstrap
 ----------------------------------------------------------------------------------- */
    // 01. Slick slider
    // 02. header js
    // 03.footer js
    // 04. Image to background js
    // 05 toggle nav
    // 06 navbar mobile nav
    // 07 menu js
    // 08. Product page
    // 09. category page
    // 10. Product page Quantity Counter
    // 11. filter sidebar js
    // 12. Filter js
    // 13. tab js
    // 14. RTL & Dark Light
    // 15. Add to cart
    // 16.  Add to wishlist
    // 17. Tap on Top
    // 18. loader
    // 19. add to cart sidebar js
    // 20. Color Picker
    // 21. Add to cart quantity Counter


    (function($) {
        "use strict";
        /*=====================
   01. Slick slider
   ==========================*/

        $('.slide-1 ').slick({
            autoplay: false,
            autoplaySpeed: 2500,
        });
        $('.slide-1-section').slick({
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 1,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 767,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 490,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }

            ]
        });
        $('.slide-4').slick({
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }

            ]
        });
        $('.slide-5').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 5,
            centerPadding: '15px',
            responsive: [
                {
                    breakpoint: 1470,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 820,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                }
            ]
        });
        $('.slide-6').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 6,
            responsive: [
                {
                    breakpoint: 1367,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1024,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true
                    }
                },
                {
                    breakpoint: 767,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                }

            ]
        });
        $('.slide-7').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 7,
            slidesToScroll: 7,
            responsive: [
                {
                    breakpoint: 1367,
                    settings: {
                        slidesToShow: 6,
                        slidesToScroll: 6
                    }
                },
                {
                    breakpoint: 1024,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        infinite: true
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            ]
        });
        $('.slide-10').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 10,
            slidesToScroll: 10,
            responsive: [
                {
                    breakpoint: 1700,
                    settings: {
                        slidesToShow: 8,
                        slidesToScroll: 8
                    }
                },
                {
                    breakpoint: 1367,
                    settings: {
                        slidesToShow: 6,
                        slidesToScroll: 6
                    }
                },
                {
                    breakpoint: 1024,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        infinite: true
                    }
                },
                {
                    breakpoint: 800,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            ]
        });
        $('.center-product-4').slick({
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 767,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },

            ]
        });
        $('.team-4').slick({
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 1,
            autoplay: true,
            autoplaySpeed: 3000,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 586,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1
                    }
                }
            ]
        });
        $('.blog-slide').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 3,
            slidesToScroll: 3,
            responsive: [
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }

            ]
        });
        $('.blog-slide-4').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            responsive: [
                {
                    breakpoint: 1700,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint: 0,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }

            ]
        });
        $('.media-slide').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 577,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },

            ]
        });
        $('.hotdeal-right-slick').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: true,
            fade: true,
            asNavFor: '.hotdeal-right-nav'
        });
        if ($(window).width() > 768) {
            $('.hotdeal-right-nav').slick({
                vertical: true,
                verticalSwiping: true,
                slidesToShow: 3,
                slidesToScroll: 1,
                asNavFor: '.hotdeal-right-slick',
                arrows: false,
                infinite: true,
                dots: false,
                centerMode: false,
                focusOnSelect: true
            });
        }else{
            $('.hotdeal-right-nav').slick({
                vertical: false,
                verticalSwiping: false,
                slidesToShow: 3,
                slidesToScroll: 1,
                asNavFor: '.hotdeal-right-slick',
                arrows: false,
                infinite: true,
                centerMode: false,
                dots: false,
                focusOnSelect: true,
                responsive: [
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        }
        $('.hotdeal-right-slick-1').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            autoplay: false,
            arrows: true,
            fade: true,
            asNavFor: '.hotdeal-right-nav-1'
        });
        if ($(window).width() > 575) {
            $('.hotdeal-right-nav-1').slick({
                vertical: true,
                verticalSwiping: true,
                slidesToShow: 3,
                slidesToScroll: 1,
                asNavFor: '.hotdeal-right-slick-1',
                arrows: false,
                infinite: true,
                dots: false,
                centerMode: false,
                focusOnSelect: true
            });
        }else{
            $('.hotdeal-right-nav-1').slick({
                vertical: false,
                verticalSwiping: false,
                slidesToShow: 3,
                slidesToScroll: 1,
                asNavFor: '.hotdeal-right-slick-1',
                arrows: false,
                infinite: true,
                centerMode: false,
                dots: false,
                focusOnSelect: true,
                responsive: [
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        }
        $('.category-slide4').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $('.category-slide5').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 5,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 800,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 400,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $('.category-slide5two').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 5,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1470,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },

                {
                    breakpoint: 800,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 520,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $('.category-slide6').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint:1200,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:900,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:767,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:525,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:361,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },

            ]
        });
        $('.category-slide7').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 7,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1470,
                    settings: {
                        slidesToShow: 6,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },

                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:768,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $('.services-slide4').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 850,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 575,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $('.services-slide5').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 5,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1367,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:1120,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll:1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 800,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll:1,
                        infinite: true
                    }
                },

                {
                    breakpoint: 420,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll:1,
                        infinite: true
                    }
                },

            ]
        });
        $('.services-slide6').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1367,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:1120,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll:1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 800,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll:1,
                        infinite: true
                    }
                },

                {
                    breakpoint: 420,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll:1,
                        infinite: true
                    }
                },

            ]
        });
        $('.testimonial-slide3').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 3,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll:1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll:1,
                        infinite: true
                    }
                },

            ]
        });

        $('.gallery-slide').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint: 567,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1
                    }
                },
            ]
        });
        $('.team-slide4').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 5,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1471,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:1060,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:769,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:480,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });

        $('.pricing-slide4').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll:1,
            responsive: [
                {
                    breakpoint:1680,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint:881,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint:576,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                },

            ]
        });



        $('.testimonial-top-slide').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: false,
            fade: true,
            asNavFor: '.testimonial-bottom-slide'
        });
        $('.testimonial-bottom-slide').slick({
            slidesToShow: 3,
            slidesToScroll: 1,
            asNavFor: '.testimonial-top-slide',
            focusOnSelect: true,
            centerPadding: '50px',
        });

        $('.brand-slide12').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 12,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1680,
                    settings: {
                        slidesToShow: 10,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1470,
                    settings: {
                        slidesToShow: 9,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1368,
                    settings: {
                        slidesToShow: 8,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1199,
                    settings: {
                        slidesToShow: 7,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 6,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 360,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });


        $('.brand-slide3').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 1,
            rows: 2,
            className: "center",
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        rows:1,
                        slidesToShow: 7,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1024,
                    settings: {
                        rows:1,
                        slidesToShow: 5,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 800,
                    settings: {
                        rows:1,
                        slidesToShow: 4,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 650,
                    settings: {
                        rows:1,
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });


        $('.hotdeal-slide3').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 3,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1600,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint:890,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });


        $('.pro-top-slide').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: false,
            fade: true,
            asNavFor: '.pro-bottom-slide'
        });
        $('.pro-bottom-slide').slick({
            slidesToShow: 4,
            slidesToScroll: 1,
            asNavFor: '.pro-top-slide',
            dots: false,
            focusOnSelect: true
        });


        $('.feature-slide').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 10,
            slidesToScroll: 2,
            responsive: [

                {
                    breakpoint: 1470,
                    settings: {
                        slidesToShow: 9,
                        slidesToScroll: 2
                    }
                },

                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 8,
                        slidesToScroll: 2
                    }
                },

                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 7,
                        slidesToScroll: 2
                    }
                },


                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 6,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint:481,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 2
                    }
                } ,
            ]
        });


        /*=====================
   02. header js
   ==========================*/

// language  block//
        $('.language-dropdown-open').slideUp();
        $('.language-dropdown-click').on('click', function (){
            $('.language-dropdown-open').slideToggle()
        });
        $('.curroncy-dropdown-open').slideUp();
        $('.curroncy-dropdown-click').on('click', function (){
            $('.curroncy-dropdown-open').slideToggle()
        })
        $('.pro-up').hide();
        $('.mor-slide-open').slideUp();
        $('.mor-slide-click').on('click', function (){
            $('.mor-slide-open').slideToggle();
            $('.pro-up').toggle();
            $('.pro-down').toggle();
        })

        $('.category-toggle').on('click', function(e) {
            $('.show').slideToggle()
            $('.category-heandle').toggleClass('open')
            $('.collapse-category').toggleClass('open')
        });

        $('.category-toggle').on('click', function(e) {
            $('.hide').slideToggle()
        });



        // $('.category-toggle').on('click', function(e) {
        //     $(this).siblings().toggleClass("hide");
        // });

        $('.mobilecat-toggle').on('click', function(e) {
            $('.collapse-category').toggleClass('open')
        });
        $('.back-btn').on('click', function(e) {
            $('.collapse-category').toggleClass('open')
        });

// mobile search //
        $('.search-overlay').hide();
        $('.close-mobile-search').on('click', function (){
            $('.search-overlay').fadeOut();
        })
        $('.mobile-search').on('click', function (){
            $('.search-overlay').show();
        });


        $('.mobile-search').on('click', function (){
            $('.searchbar-input').addClass('open');
        });

        $('.close-searchbar').on('click', function (){
            $('.searchbar-input').removeClass('open');
        });




        // sticky header //
        // $(window).scroll(function() {
        // if ($(this).scrollTop() > 400){
        //     // $('header').addClass("sticky");
        //     $('.product-top-sticky').addClass("sticky");
        //   }
        //   else{
        //     // $('header').removeClass("sticky");
        //     $('product-top-sticky').removeClass("sticky");
        //   }
        // });


        $(window).scroll(function() {
            if ($(this).scrollTop() > 300) {
                $('header').addClass("sticky");
            } else {
                $('header').removeClass("sticky");
            }
        });




        // header category //

        var contentwidth = jQuery(window).width();
        if ((contentwidth) < '1200') {
            jQuery('.cat-title').on('click', function () {
                jQuery(this).parents('li').siblings().children('.collapse-mega').slideUp('normal');
                jQuery(this).parent().siblings().children('.collapse-mega').slideUp('normal');
                jQuery(this).parent().siblings().children('.collapse-mega').children().find('.collapse-mega').slideUp('normal');
                jQuery(this).parents('li').siblings().children('.sub-collapse').slideUp('normal');
                jQuery(this).parent().siblings().children('.sub-collapse').slideUp('normal');
                jQuery(this).parent().siblings().children('.sub-collapse').children().find('.sub-collapse').slideUp('normal');
                if (jQuery(this).next().is(':hidden') == true) {
                    jQuery(this).addClass('active');
                    jQuery(this).next().slideDown('normal');
                }
            });

            jQuery('.sub-collapse').hide();
            jQuery('.collapse-mega').hide();
        }
        $('span.sub-arrow').on('click',function(){
            $('.categoryone .collapse-mega .mega-box ul').removeClass('open');
            $(this).parent().next().toggleClass('open');
        });




        /*=====================
   03.footer js
   ==========================*/
        var contentwidth = jQuery(window).width();
        if ((contentwidth) < '767') {
            jQuery('.footer-title h5').append('<span class="according-menu"></span>');
            jQuery('.footer-title').on('click', function () {
                jQuery('.footer-title').removeClass('active');
                jQuery('.footer-contant').slideUp('normal');
                if (jQuery(this).next().is(':hidden') == true) {
                    jQuery(this).addClass('active');
                    jQuery(this).next().slideDown('normal');
                }
            });
            jQuery('.footer-contant').hide();
        } else {
            jQuery('.footer-contant').show();
        }





        /*=====================
   04. Image to background js
   ==========================*/
        $(".bg-top" ).parent().addClass('b-top');
        $(".bg-bottom" ).parent().addClass('b-bottom');
        $(".bg-center" ).parent().addClass('b-center');
        $(".bg_size_content").parent().addClass('b_size_content');
        $(".bg-img" ).parent().addClass('bg-size');

        jQuery('.bg-img').each(function() {

            var el = $(this),
                src = el.attr('src'),
                parent = el.parent();

            parent.css({
                'background-image': 'url(' + src + ')',
                'background-size': 'cover',
                'background-position': 'center',
                'display' : 'block'
            });

            el.hide();
        });

        /*=====================
   05 toggle nav
   ==========================*/
        $('.toggle-nav').on('click', function () {
            $('.sm-horizontal').css("right","0px");
        });
        $(".mobile-back").on('click', function (){
            $('.sm-horizontal').css("right","-410px");
        });

        /*=====================
   06 navbar mobile nav
   ==========================*/
        $('.sm-nav-btn').on('click',function(){
            $('.nav-slide').css("left","0px");
        });
        $(".nav-sm-back").on('click', function (){
            $('.nav-slide').css("left","-410px");
        });

        $('.toggle-nav-desc').on('click', function () {
            $('.desc-horizontal').css("right","0px");
        });
        $(".desc-back").on('click', function (){
            $('.desc-horizontal').css("right","-410px");
        });

        /*=====================
   07 menu js
   ==========================*/

        function openNav() {
            document.getElementById("mySidenav").classList.add('open-side');
        }
        function closeNav() {
            document.getElementById("mySidenav").classList.remove('open-side');
        }
        $(function() {
            $('#main-menu').smartmenus({
                subMenusSubOffsetX: 1,
                subMenusSubOffsetY: -8
            });
            $('#sub-menu').smartmenus({
                subMenusSubOffsetX: 1,
                subMenusSubOffsetY: -8
            });
        });

        /*=====================
   08. Product page
   ==========================*/

        $('.product-slick').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: true,
            fade: true,
            asNavFor: '.slider-nav'
        });

        $('.slider-nav').slick({
            vertical: false,
            slidesToShow: 3,
            slidesToScroll: 1,
            asNavFor: '.product-slick',
            arrows: false,
            dots: false,
            focusOnSelect: true
        });

        $('.product-right-slick').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: true,
            fade: true,
            asNavFor: '.slider-right-nav'
        });
        if ($(window).width() > 575) {
            $('.slider-right-nav').slick({
                vertical: true,
                verticalSwiping: true,
                slidesToShow: 3,
                slidesToScroll: 1,
                asNavFor: '.product-right-slick',
                arrows: false,
                infinite: true,
                dots: false,
                centerMode: false,
                focusOnSelect: true
            });
        }else{
            $('.slider-right-nav').slick({
                vertical: false,
                verticalSwiping: false,
                slidesToShow: 3,
                slidesToScroll: 1,
                asNavFor: '.product-right-slick',
                arrows: false,
                infinite: true,
                centerMode: false,
                dots: false,
                focusOnSelect: true,
                responsive: [
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        }






        /*=====================
   09. category page
   ==========================*/
        $('.collapse-block-title').on('click', function(e) {
            e.preventDefault;
            var speed = 300;
            var thisItem = $(this).parent(),
                nextLevel = $(this).next('.collection-collapse-block-content');
            if (thisItem.hasClass('open')){
                thisItem.removeClass('open');
                nextLevel.slideUp(speed);
            }
            else {
                thisItem.addClass('open');
                nextLevel.slideDown(speed);
            }
        });

        $('.color-selector ul li > div').on('click', function(e) {
            $(".color-selector ul li > div").removeClass("active");
            $(this).addClass("active");
        });

        // $('.size-box ul li').on('click', function(e) {
        //   $(".size-box ul li").removeClass("active");
        //   $(this).addClass("active");
        // });

        $('.image-swatch li ').on('click', function(e) {
            $(".image-swatch li ").removeClass("active");
            $(this).addClass("active");
        });

        $('.show-offer').on('click', function(e) {
            $(".offer-sider").slideToggle();
            $(".more-offer").fadeToggle();
            $(".less-offer").fadeToggle();
        });



        $('.size-box ul li').on('click', function(e) {
            $(".size-box ul li").removeClass("active");
            $('#selectSize').removeClass('cartMove');
            $(this).addClass("active");
            $(this).parent().addClass('selected');
        });



        $('#cartEffect').on('click', function(e) {
            if ($("#selectSize .size-box ul").hasClass('selected')){
                $('#cartEffect').text("Added to bag ");
                $('.added-notification').addClass("show");
                setTimeout(function(){
                    $('.added-notification').removeClass("show");
                },5000);
            } else {
                $('#selectSize').addClass('cartMove');
            }
        });







//list layout view
        $('.list-layout-view').on('click', function(e) {
            $('.collection-grid-view').css('opacity', '0');
            $(".product-wrapper-grid").css("opacity","0.2");
            $('.shop-cart-ajax-loader').css("display","block");
            $('.product-wrapper-grid').addClass("list-view");
            $(".product-wrapper-grid").children().children().removeClass();
            $(".product-wrapper-grid").children().children().addClass("col-lg-12");
            setTimeout(function(){
                $(".product-wrapper-grid").css("opacity","1");
                $('.shop-cart-ajax-loader').css("display","none");
            }, 500);
        });
//grid layout view
        $('.grid-layout-view').on('click', function(e) {
            $('.collection-grid-view').css('opacity', '1');
            $('.product-wrapper-grid').removeClass("list-view");
            $(".product-wrapper-grid").children().children().removeClass();
            $(".product-wrapper-grid").children().children().addClass("col-lg-3");

        });
        $('.product-2-layout-view').on('click', function(e) {
            if($('.product-wrapper-grid').hasClass("list-view")) {}
            else{
                $(".product-wrapper-grid").children().children().removeClass();
                $(".product-wrapper-grid").children().children().addClass("col-lg-6");
            }
        });
        $('.product-3-layout-view').on('click', function(e) {
            if($('.product-wrapper-grid').hasClass("list-view")) {}
            else{
                $(".product-wrapper-grid").children().children().removeClass();
                $(".product-wrapper-grid").children().children().addClass("col-lg-4");
            }
        });
        $('.product-4-layout-view').on('click', function(e) {
            if($('.product-wrapper-grid').hasClass("list-view")) {}
            else{
                $(".product-wrapper-grid").children().children().removeClass();
                $(".product-wrapper-grid").children().children().addClass("col-lg-3");
            }
        });
        $('.product-6-layout-view').on('click', function(e) {
            if($('.product-wrapper-grid').hasClass("list-view")) {}
            else{
                $(".product-wrapper-grid").children().children().removeClass();
                $(".product-wrapper-grid").children().children().addClass("col-lg-2");
            }
        });


        /*=====================
   10. Product page Quantity Counter
   ==========================*/
        // $('.qty-box .quantity-right-plus').on('click', function () {
        //   var $qty = $('.qty-box .input-number');
        //   var currentVal = parseInt($qty.val(), 10);
        //   if (!isNaN(currentVal)) {
        //     $qty.val(currentVal + 1);
        //   }
        // });
        // $('.qty-box .quantity-left-minus').on('click', function () {
        //   var $qty = $('.qty-box .input-number');
        //   var currentVal = parseInt($qty.val(), 10);
        //   if (!isNaN(currentVal) && currentVal > 1) {
        //     $qty.val(currentVal - 1);
        //   }
        // });


        // var qtyHolders = document.querySelectorAll(".qty-holder");
        var qtyDecs = document.querySelectorAll(".qty-minus");
        var qtyIncs = document.querySelectorAll(".qty-plus");
        qtyDecs.forEach((qtyDec) => {
            qtyDec.addEventListener("click",function(e){
                if(e.target.nextElementSibling.value > 0){
                    e.target.nextElementSibling.value--;
                } else {
                    // delete the item, etc
                }
            })
        })
        qtyIncs.forEach((qtyDec) => {
            qtyDec.addEventListener("click",function(e){
                e.target.previousElementSibling.value++;
            })
        })



        /*=====================
   11. filter sidebar js
   ==========================*/
        $('.sidebar-popup').on('click', function(e) {
            $('.open-popup').toggleClass('open');
            $('.collection-filter').css("left","-15px");
        });
        $('.filter-main-btn').on('click', function(e) {
            $('.collection-filter').css("left","-15px");
        });
        $('.filter-back').on('click', function(e) {
            $('.collection-filter').css("left","-365px");
            $('.sidebar-popup').trigger('click');
        });

        $('.account-sidebar').on('click', function(e) {
            $('.dashboard-left').css("left","0");
        });
        $('.filter-back').on('click', function(e) {
            $('.dashboard-left').css("left","-365px");
        });

        $(function () {
            $(".col-grid-box").slice(0, 8).show();
            $(".loadMore").on('click', function (e) {
                e.preventDefault();
                $(".col-grid-box:hidden").slice(0, 4).slideDown();
                if ($(".col-grid-box:hidden").length == 0) {
                    $(".load-more-sec").text('no more products');
                }
            });
        });

        $('.horizontal-filter-toggle').on('click', function(e) {
            $('.horizontal-filter').slideToggle('');
        });

        $('.close-filter').on('click', function(e) {
            $('.horizontal-filter').slideToggle('');
        });






        /*=====================
  12. Filter js
   ==========================*/
        $(".filter-button").on('click', function (){
            $(this).addClass('active').siblings('.active').removeClass('active');
            var value = $(this).attr('data-filter');
            if(value == "all")
            {
                $('.filter').show('1000');
            }
            else
            {
                $(".filter").not('.'+value).hide('3000');
                $('.filter').filter('.'+value).show('3000');
            }
        });

        $("#formButton").on('click', function (){
            $("#form1").toggle();
        });


        /*=====================
    13. Tab js
   ==========================*/
        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.product-4').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $(".product-4").slick({
                arrows: true,
                dots: false,
                infinite: false,
                speed: 300,
                slidesToShow: 4,
                slidesToScroll: 1,
                responsive: [
                    {
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3
                        }
                    },
                    {
                        breakpoint:991,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    },
                    {
                        breakpoint: 420,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        });


        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.product-slide').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $(".product-slide").slick({
                arrows: true,
                dots: false,
                infinite: false,
                speed: 300,
                slidesToShow: 3,
                slidesToScroll: 1,
                responsive: [
                    {
                        breakpoint:991,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    },
                    {
                        breakpoint: 420,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        });

        // new tab
        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.product-slide-6').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $(".product-slide-6").slick({
                arrows: true,
                dots: false,
                infinite: false,
                speed: 300,
                slidesToShow: 6,
                slidesToScroll: 6,
                responsive: [
                    {
                        breakpoint: 1700,
                        settings: {
                            slidesToShow: 5,
                            slidesToScroll: 5,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 4,
                            slidesToScroll: 4,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 991,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    }
                ]
            });
        });

        // product-4
        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.product-slide-4').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $(".product-slide-4").slick({
                arrows: true,
                dots: false,
                infinite: false,
                speed: 300,
                slidesToShow: 4,
                slidesToScroll: 4,
                responsive: [
                    {
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 900,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1,
                            infinite: true
                        }
                    },
                ]
            });
        });


        // product-5
        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.slide-5').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $('.slide-5').slick({
                dots: false,
                infinite: true,
                speed: 300,
                slidesToShow: 5,
                centerPadding: '15px',
                responsive: [
                    {
                        breakpoint: 1470,
                        settings: {
                            slidesToShow: 4,
                            slidesToScroll: 4,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 992,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 820,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 420,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1,
                            infinite: true
                        }
                    }
                ]
            });
        });


        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.product-slide-5').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $(".product-slide-5").slick({
                arrows: true,
                dots: false,
                infinite: false,
                speed: 300,
                slidesToShow: 5,
                slidesToScroll: 1,
                responsive: [
                    {
                        breakpoint: 1700,
                        settings: {
                            slidesToShow: 5,
                            slidesToScroll: 5,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 4,
                            slidesToScroll: 4,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 991,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    }
                ]
            });
        });




        // product-3
        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.product-slide-3').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $(".product-slide-3").slick({
                arrows: true,
                dots: false,
                infinite: false,
                speed: 300,
                slidesToShow: 3,
                slidesToScroll: 2,
                responsive: [
                    {
                        breakpoint: 1420,
                        settings: {
                            slidesToShow:2,
                            slidesToScroll: 2,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 420,
                        settings: {
                            slidesToShow:1,
                            slidesToScroll: 1,
                            infinite: true
                        }
                    },
                ]
            });
        });


        // gallery slide //
        $("#tab-1").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.gallery-slide').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $('.gallery-slide').slick({
                dots: false,
                infinite: true,
                speed: 300,
                slidesToShow: 4,
                slidesToScroll: 4,
                responsive: [
                    {
                        breakpoint: 992,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3
                        }
                    },
                    {
                        breakpoint: 567,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    },
                ]
            });
        });


        // media product slide 5

        $("#tab-7").css("display", "Block");
        $(".default").css("display", "Block");
        $(".tabs li a").on('click', function () {
            event.preventDefault();
            $('.tab_product_slider').slick('unslick');
            $('.media-slide-5').slick('unslick');
            $(this).parent().parent().find("li").removeClass("current");
            $(this).parent().addClass("current");
            var currunt_href = $(this).attr("href");
            $('#' + currunt_href).show();
            $(this).parent().parent().parent().find(".tab-content").not('#' + currunt_href).css("display", "none");
            $('.media-slide-5').slick({
                dots: false,
                infinite: true,
                speed: 300,
                slidesToShow: 5,
                centerPadding: '15px',
                responsive: [
                    {
                        breakpoint: 1470,
                        settings: {
                            slidesToShow: 4,
                            slidesToScroll: 4,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 992,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 820,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2,
                            infinite: true
                        }
                    },
                    {
                        breakpoint: 576,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1,
                            infinite: true
                        }
                    }
                ]
            });
        });





        $('.media-slide-5').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 5,
            centerPadding: '15px',
            responsive: [
                {
                    breakpoint: 1470,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true
                    }
                },
                {
                    breakpoint: 992,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 820,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                }
            ]
        });





        // new tab
        $(".product-slide-3").slick({
            arrows: true,
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 3,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1420,
                    settings: {
                        slidesToShow:2,
                        slidesToScroll:2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 420,
                    settings: {
                        slidesToShow:1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $(".product-slide-4").slick({
            arrows: true,
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 900,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        infinite: true
                    }
                },
            ]
        });
        $(".product-slide-5").slick({
            arrows: true,
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 5,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1700,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                }
            ]
        });
        $(".product-slide-6").slick({
            arrows: true,
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 1,
            responsive: [
                {
                    breakpoint: 1700,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 576,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                }
            ]
        });
        $('.product-4').slick({
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            autoplay: true,
            autoplaySpeed: 3000,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow:2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 420,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }
            ]
        });
        $('.product-slide').slick({
            dots: false,
            infinite: true,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 6,
            responsive: [
                {
                    breakpoint: 1700,
                    settings: {
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        infinite: true
                    }
                },
                {
                    breakpoint: 1367,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 481,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }

            ]
        });
        $('.product_4').slick({
            infinite: true,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 4,
            autoplay: true,
            autoplaySpeed: 5000,
            responsive: [
                {
                    breakpoint: 1430,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow:2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 420,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }
            ]
        });
        $('.product-6').slick({
            infinite: true,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 6,
            autoplay: true,
            autoplaySpeed: 3000,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 991,
                    settings: {
                        slidesToShow:2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 420,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }
            ]
        });


        /*=====================
   14. RTL & Dark Light
   ==========================*/

        $('<div class="theme-pannel-main"><ul><li id="rtl_btn"><a href="#0" class="btn setting_btn"><span class="rtl-txt">Rtl</span></a></li><li id="ltr_btn"><a href="#0" class="btn setting_btn"><span class="rtl-txt">Ltr</span></a></li><li class="sidebar-btn dark-light-btn"><a href="#0" class="dark-light"><span class="theme-layout-version">Dark</span></a></li></ul></div><div class="color-picker"> <a href="#" class="handle title"> <img src="../assets/images/paint.png"/> </a> <div> <h4>Choose color</h4> <ul class="colors"> <li class="color1"></li><li class="color2"></li><li class="color3"></li><li class="color4"></li><li class="color5"></li><li class="color6"></li><li class="color7"></li><li class="color8"></li><li class="color9"></li><li class="color10"></li><li class="color11"></li><li class="color12"></li><li class="color13"></li><li class="color14"></li><li class="color15"></li></ul> </div></div>').appendTo($('body'));
        (function() {
        })();
        $('#ltr_btn').hide();
        $("#ltr_btn").on('click', function (){
            $('body').addClass('ltr');
            $('body').removeClass('rtl');
            $('#ltr_btn').hide();
            $('#rtl_btn').show();
        });
        $("#rtl_btn").on('click', function (){
            $('body').addClass('rtl');
            $('body').removeClass('ltr');
            $('#rtl_btn').hide();
            $('#ltr_btn').show();
        });
        $(".setting_buttons li").on('click', function (){
            $(this).addClass('active').siblings().removeClass('active');
        });
        $(".color-picker li").on('click', function (){
            $(this).addClass('active').siblings().removeClass('active');
        });

// dark layout //
        var body_event = $("body");
        body_event.on("click", ".theme-layout-version" , function(){
            $(this).toggleClass('dark');
            $('body').removeClass('dark');
            if($('.theme-layout-version').hasClass('dark')){
                $('.theme-layout-version').text('Light');
                $('body').addClass('dark');
            }else{
                $('#theme-dark').remove();
                $('.theme-layout-version').text('Dark');
            }

            return false;
        });

        /*=====================
   15. Add to cart
   ==========================*/
        $('.add-cartnoty').on('click', function () {
            $.notify({
                icon: 'fa fa-check',
                title: 'Success!',
                message: 'Item Successfully added to your cart'
            },{
                element: 'body',
                position: null,
                type: "success",
                allow_dismiss: true,
                newest_on_top: false,
                showProgressbar: true,
                placement: {
                    from: "top",
                    align: "right"
                },
                offset: 20,
                spacing: 10,
                z_index: 1031,
                delay: 5000,
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                },
                icon_type: 'class',
                template: '<div data-notify="container" class="col-xs-11 col-sm-3 alert alert-{0}" role="alert">' +
                    '<button type="button" aria-hidden="true" class="btn-close" data-notify="dismiss"></button>' +
                    '<span data-notify="icon"></span> ' +
                    '<span data-notify="title">{1}</span> ' +
                    '<span data-notify="message">{2}</span>' +
                    '<div class="progress" data-notify="progressbar">' +
                    '<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +
                    '</div>' +
                    '<a href="{3}" target="{4}" data-notify="url"></a>' +
                    '</div>'
            });
        });

        /*=====================
   16.  Add to wishlist
   ==========================*/
        $('.add-to-wish').on('click', function () {

            $.notify({
                icon: 'fa fa-check',
                title: 'Success!',
                message: 'Item Successfully added in wishlist'
            },{
                element: 'body',
                position: null,
                type: "info",
                allow_dismiss: true,
                newest_on_top: false,
                showProgressbar: true,
                placement: {
                    from: "top",
                    align: "right"
                },
                offset: 20,
                spacing: 10,
                z_index: 1031,
                delay: 5000,
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                },
                icon_type: 'class',
                template: '<div data-notify="container" class="col-xs-11 col-sm-3 alert alert-{0}" role="alert">' +
                    '<button type="button" aria-hidden="true" class="btn-close" data-notify="dismiss"></button>' +
                    '<span data-notify="icon"></span> ' +
                    '<span data-notify="title">{1}</span> ' +
                    '<span data-notify="message">{2}</span>' +
                    '<div class="progress" data-notify="progressbar">' +
                    '<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +
                    '</div>' +
                    '<a href="{3}" target="{4}" data-notify="url"></a>' +
                    '</div>'
            });
        });



        $(window).on('scroll', function() {
            if ($(this).scrollTop() > 600) {
                $('.tap-top').addClass('top-cls');

            } else {
                $('.tap-top').removeClass('top-cls');
            }
        });

        $(' <div class="tap-top" style="display: block;"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 285 285" style="enable-background:new 0 0 285 285;" xml:space="preserve"><g><path d="M88.4,87.996c2.525-2.146,2.832-5.933,0.687-8.458C82.801,72.144,79.34,62.719,79.34,53c0-22.607,18.393-41,41-41c22.607,0,41,18.393,41,41c0,9.729-3.467,19.161-9.761,26.557c-2.148,2.523-1.843,6.311,0.681,8.458c1.129,0.961,2.511,1.431,3.886,1.431c1.698,0,3.386-0.717,4.572-2.111C168.858,77.77,173.34,65.576,173.34,53c0-29.225-23.775-53-53-53c-29.225,0-53,23.775-53,53c0,12.563,4.476,24.748,12.602,34.31C82.089,89.835,85.873,90.141,88.4,87.996z"/><path d="M120.186,41.201c13.228,0,23.812,8.105,27.313,19.879c0.761-2.562,1.176-5.271,1.176-8.08c0-15.649-12.685-28.335-28.335-28.335c-15.648,0-28.334,12.686-28.334,28.335c0,2.623,0.364,5.16,1.031,7.571C96.691,49.076,107.152,41.201,120.186,41.201z"/><path d="M234.21,169.856c-3.769-22.452-19.597-26.04-27.034-26.462c-2.342-0.133-4.516-1.32-5.801-3.282c-5.388-8.225-12.609-10.4-18.742-10.4c-4.405,0-8.249,1.122-10.449,1.932c-0.275,0.102-0.559,0.15-0.837,0.15c-0.87,0-1.701-0.47-2.163-1.262c-5.472-9.387-13.252-11.809-19.822-11.809c-3.824,0-7.237,0.82-9.548,1.564c-0.241,0.077-0.764,0.114-1.001,0.114c-1.256,0-2.637-1.03-2.637-2.376V69.753c0-11.035-8.224-16.552-16.5-16.552c-8.276,0-16.5,5.517-16.5,16.552v84.912c0,4.989-3.811,8.074-7.918,8.074c-2.495,0-4.899-1.138-6.552-3.678l-7.937-12.281c-3.508-5.788-8.576-8.188-13.625-8.189c-11.412-0.001-22.574,12.258-14.644,25.344l62.491,119.692c0.408,0.782,1.225,1.373,2.108,1.373h87.757c1.253,0,2.289-1.075,2.365-2.325l2.196-35.816c0.025-0.413,0.162-0.84,0.39-1.186C231.591,212.679,237.828,191.414,234.21,169.856z"/></g></svg></div>').appendTo($('body'));
        (function() {
        })();
        $('.tap-top').on('click', function() {
            $("html, body").animate({
                scrollTop: 0
            }, 600);
            return false;
        });

        /*=====================
     18. loader
     ==========================*/

        $('.loader-wrapper').fadeOut('slow', function() {
            $(this).remove();
        });


        /*=====================
   19. add to cart sidebar js
   ==========================*/
        function openCart() {
            document.getElementById("cart_side").classList.add('open-side');
        }
        function closeCart() {
            document.getElementById("cart_side").classList.remove('open-side');
        }


        // $(window).scroll(function () {
        //   var scroll = $(window).scrollTop();
        //   var width_content = jQuery(window).width();
        //   if ((width_content) > '576') {
        //   if (scroll >= 800) {
        //       $("body").addClass("stickyCart");
        //   } else {
        //       $("body").removeClass("stickyCart");
        //   }
        // }
        // });


        $(window).on('scroll', function() {
            if ($(this).scrollTop() > 800) {
                $('.bottom-cart-sticky').addClass('open-cart');
            } else {
                $('.bottom-cart-sticky').removeClass('open-cart');
            }
        });





        /*=====================
  20. Color Picker
   ==========================*/
        var body_event = $("body");
        body_event.on("click", ".color1", function() {
            $("#color" ).attr("href", "../assets/css/color1.css" );
            return false;

        });
        body_event.on("click", ".color2", function() {
            $("#color" ).attr("href", "../assets/css/color2.css" );
            return false;
        });
        body_event.on("click", ".color3", function() {
            $("#color" ).attr("href", "../assets/css/color3.css" );
            return false;
        });
        body_event.on("click", ".color4", function() {
            $("#color" ).attr("href", "../assets/css/color4.css" );
            return false;
        });
        body_event.on("click", ".color5", function() {
            $("#color" ).attr("href", "../assets/css/color5.css" );
            return false;
        });
        body_event.on("click", ".color6", function() {
            $("#color" ).attr("href", "../assets/css/color6.css" );
            return false;
        });
        body_event.on("click", ".color7", function() {
            $("#color" ).attr("href", "../assets/css/color7.css" );
            return false;
        });
        body_event.on("click", ".color8", function() {
            $("#color" ).attr("href", "../assets/css/color8.css" );
            return false;
        });
        body_event.on("click", ".color9", function() {
            $("#color" ).attr("href", "../assets/css/color9.css" );
            return false;
        });
        body_event.on("click", ".color10", function() {
            $("#color" ).attr("href", "../assets/css/color10.css" );
            return false;
        });
        body_event.on("click", ".color11", function() {
            $("#color" ).attr("href", "../assets/css/color11.css" );
            return false;
        });
        body_event.on("click", ".color12", function() {
            $("#color" ).attr("href", "../assets/css/color12.css" );
            return false;
        });
        body_event.on("click", ".color13", function() {
            $("#color" ).attr("href", "../assets/css/color13.css" );
            return false;
        });
        body_event.on("click", ".color14", function() {
            $("#color" ).attr("href", "../assets/css/color14.css" );
            return false;
        });
        body_event.on("click", ".color15", function() {
            $("#color" ).attr("href", "../assets/css/color15.css" );
            return false;
        });

        $('.color-picker').animate({right: '-150px'});

        body_event.on("click", ".color-picker a.handle", function(e) {
            e.preventDefault();
            var div = $('.color-picker');
            if (div.css('right') === '-150px') {
                $('.color-picker').animate({right: '0px'});
            }
            else {
                $('.color-picker').animate({right: '-150px'});
            }
        });

        /*=====================
  21. Add to cart quantity Counter
   ==========================*/
        $('button.add-button').on('click',function(){
            $(this).next().addClass("open");
            $(".qty-input").val('1kg');
        });
        $('.quantity-right-plus').on('click',function(){
            var $qty = $(this).siblings(".qty-input");
            var currentVal = parseInt($qty.val());
            if (!isNaN(currentVal)) {
                $qty.val(currentVal + 1 + 'kg');
            }
        });
        $('.quantity-left-minus').on('click',function(){
            var $qty = $(this).siblings(".qty-input");
            var _val =  $($qty).val();
            if(_val == '1kg') {
                var _removeCls = $(this).parents('.cart_qty');
                $(_removeCls).removeClass("open");
            }
            var currentVal = parseInt($qty.val());
            if (!isNaN(currentVal) && currentVal > 0) {
                $qty.val(currentVal - 1 + 'kg');
            }
        });




        /*================================
     22. counter js
    ===================================*/

        $('.counter-count').each(function () {
            $(this).prop('Counter',0).animate({
                Counter: $(this).text()
            }, {

                //chnage count up speed here
                duration: 4000 ,
                easing: 'swing',
                step: function (now) {
                    $(this).text(Math.ceil(now));
                }
            });
        });




        /*=============
     23. Tooltip js
    ===============*/
        tippy('.tooltip-top', {
            content: 'My tooltip!',
            placement: 'top',
        });

        tippy('.tooltip-left', {
            content: 'My tooltip!',
            placement: 'left',
        });

        tippy('.tooltip-right', {
            content: 'My tooltip!',
            placement: 'right',
        });

        tippy('.tooltip-bottom', {
            content: 'My tooltip!',
            placement: 'bottom',
        });


        /*=====================
     26. Cookiebar
     ==========================*/
        window.setTimeout(function(){
            $(".cookie-bar").addClass('show')
        }, 5000);

        $('.cookie-bar .btn, .cookie-bar .btn-close').on('click',function(){
            $(".cookie-bar").removeClass('show')
        });




    })(jQuery);

    function openCart() {
        document.getElementById("cart_side").classList.add('open-side');
    }
    function closeCart() {
        document.getElementById("cart_side").classList.remove('open-side');
    }



    function openAccount() {
        document.getElementById("myAccount").classList.add('open-side');
    }
    function closeAccount() {
        document.getElementById("myAccount").classList.remove('open-side');
    }

    function openWishlist() {
        document.getElementById("wishlist_side").classList.add('open-side');
    }
    function closeWishlist() {
        document.getElementById("wishlist_side").classList.remove('open-side');
    }
    function openSetting() {
        document.getElementById("mySetting").classList.add('open-side');
    }
    function closeSetting() {
        document.getElementById("mySetting").classList.remove('open-side');
    }
</script>


<!-- slick js-->
<script src="http://themes.pixelstrap.com/bigdeal/assets/js/slick.js"></script>





<!-- Timer js-->
<script src="http://themes.pixelstrap.com/bigdeal/assets/js/menu.js"></script>





<!-- Theme js-->
<script src="http://themes.pixelstrap.com/bigdeal/assets/js/script.js"></script>